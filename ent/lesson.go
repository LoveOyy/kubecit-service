// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kubecit-service/ent/chapter"
	"kubecit-service/ent/lesson"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Lesson is the model entity for the Lesson schema.
type Lesson struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 课程名称
	Name string `json:"name,omitempty"`
	// 发布时间
	ReleasedTime time.Time `json:"released_time,omitempty"`
	// 序号
	Sort int `json:"sort,omitempty"`
	// 课程类型
	Type int `json:"type,omitempty"`
	// 课程存储路径
	StoragePath string `json:"storage_path,omitempty"`
	// 课程来源
	Source string `json:"source,omitempty"`
	// 课件地址
	Courseware string `json:"courseware,omitempty"`
	// 是否免费试看
	IsFreePreview int `json:"is_free_preview,omitempty"`
	// 章节Id
	ChapterID int `json:"chapter_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LessonQuery when eager-loading is set.
	Edges        LessonEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LessonEdges holds the relations/edges for other nodes in the graph.
type LessonEdges struct {
	// Chapter holds the value of the chapter edge.
	Chapter *Chapter `json:"chapter,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChapterOrErr returns the Chapter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonEdges) ChapterOrErr() (*Chapter, error) {
	if e.loadedTypes[0] {
		if e.Chapter == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: chapter.Label}
		}
		return e.Chapter, nil
	}
	return nil, &NotLoadedError{edge: "chapter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Lesson) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lesson.FieldID, lesson.FieldSort, lesson.FieldType, lesson.FieldIsFreePreview, lesson.FieldChapterID:
			values[i] = new(sql.NullInt64)
		case lesson.FieldName, lesson.FieldStoragePath, lesson.FieldSource, lesson.FieldCourseware:
			values[i] = new(sql.NullString)
		case lesson.FieldReleasedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Lesson fields.
func (l *Lesson) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lesson.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case lesson.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				l.Name = value.String
			}
		case lesson.FieldReleasedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field released_time", values[i])
			} else if value.Valid {
				l.ReleasedTime = value.Time
			}
		case lesson.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				l.Sort = int(value.Int64)
			}
		case lesson.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				l.Type = int(value.Int64)
			}
		case lesson.FieldStoragePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field storage_path", values[i])
			} else if value.Valid {
				l.StoragePath = value.String
			}
		case lesson.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				l.Source = value.String
			}
		case lesson.FieldCourseware:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field courseware", values[i])
			} else if value.Valid {
				l.Courseware = value.String
			}
		case lesson.FieldIsFreePreview:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_free_preview", values[i])
			} else if value.Valid {
				l.IsFreePreview = int(value.Int64)
			}
		case lesson.FieldChapterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chapter_id", values[i])
			} else if value.Valid {
				l.ChapterID = int(value.Int64)
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Lesson.
// This includes values selected through modifiers, order, etc.
func (l *Lesson) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryChapter queries the "chapter" edge of the Lesson entity.
func (l *Lesson) QueryChapter() *ChapterQuery {
	return NewLessonClient(l.config).QueryChapter(l)
}

// Update returns a builder for updating this Lesson.
// Note that you need to call Lesson.Unwrap() before calling this method if this Lesson
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Lesson) Update() *LessonUpdateOne {
	return NewLessonClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Lesson entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Lesson) Unwrap() *Lesson {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Lesson is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Lesson) String() string {
	var builder strings.Builder
	builder.WriteString("Lesson(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("name=")
	builder.WriteString(l.Name)
	builder.WriteString(", ")
	builder.WriteString("released_time=")
	builder.WriteString(l.ReleasedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", l.Sort))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", l.Type))
	builder.WriteString(", ")
	builder.WriteString("storage_path=")
	builder.WriteString(l.StoragePath)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(l.Source)
	builder.WriteString(", ")
	builder.WriteString("courseware=")
	builder.WriteString(l.Courseware)
	builder.WriteString(", ")
	builder.WriteString("is_free_preview=")
	builder.WriteString(fmt.Sprintf("%v", l.IsFreePreview))
	builder.WriteString(", ")
	builder.WriteString("chapter_id=")
	builder.WriteString(fmt.Sprintf("%v", l.ChapterID))
	builder.WriteByte(')')
	return builder.String()
}

// Lessons is a parsable slice of Lesson.
type Lessons []*Lesson
