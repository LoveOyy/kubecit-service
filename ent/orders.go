// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kubecit-service/ent/orders"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Orders is the model entity for the Orders schema.
type Orders struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 用户id
	UserID int32 `json:"user_id,omitempty"`
	// 平台自己生成的订单号
	OrderSn string `json:"order_sn,omitempty"`
	// 支付类型 NO_PAY = 1 ; // 还未支付 ALIPAY = 2; // 支付宝 WECHAT = 3; // 微信支付 GOLDEN_LEAF = 4;  // 金叶子 SILVER_LEAF = 5;  //银叶子
	PayType int32 `json:"pay_type,omitempty"`
	// 支付状态 UNPAID = 1; // 未支付 PAID = 2; // 已支付 FAILED = 3; //支付失败 CLOSED = 4; //关闭 CANCELED = 5; //取消 REFUNDING = 6; //退款中 REFUNDED = 7; //退款成功 REFUND_FAILED = 8;//退款失败
	PayStatus int32 `json:"pay_status,omitempty"`
	// 订单价格(单位分)
	TradePrice int32 `json:"trade_price,omitempty"`
	// 交易号 就是微信、支付宝的订单号 查账
	TradeNo string `json:"trade_no,omitempty"`
	// 支付时间
	PayTime time.Time `json:"pay_time,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Orders) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orders.FieldID, orders.FieldUserID, orders.FieldPayType, orders.FieldPayStatus, orders.FieldTradePrice:
			values[i] = new(sql.NullInt64)
		case orders.FieldOrderSn, orders.FieldTradeNo:
			values[i] = new(sql.NullString)
		case orders.FieldPayTime, orders.FieldCreateTime, orders.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Orders fields.
func (o *Orders) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orders.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case orders.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				o.UserID = int32(value.Int64)
			}
		case orders.FieldOrderSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_sn", values[i])
			} else if value.Valid {
				o.OrderSn = value.String
			}
		case orders.FieldPayType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pay_type", values[i])
			} else if value.Valid {
				o.PayType = int32(value.Int64)
			}
		case orders.FieldPayStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pay_status", values[i])
			} else if value.Valid {
				o.PayStatus = int32(value.Int64)
			}
		case orders.FieldTradePrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field trade_price", values[i])
			} else if value.Valid {
				o.TradePrice = int32(value.Int64)
			}
		case orders.FieldTradeNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trade_no", values[i])
			} else if value.Valid {
				o.TradeNo = value.String
			}
		case orders.FieldPayTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field pay_time", values[i])
			} else if value.Valid {
				o.PayTime = value.Time
			}
		case orders.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				o.CreateTime = value.Time
			}
		case orders.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				o.UpdateTime = value.Time
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Orders.
// This includes values selected through modifiers, order, etc.
func (o *Orders) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// Update returns a builder for updating this Orders.
// Note that you need to call Orders.Unwrap() before calling this method if this Orders
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Orders) Update() *OrdersUpdateOne {
	return NewOrdersClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Orders entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Orders) Unwrap() *Orders {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Orders is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Orders) String() string {
	var builder strings.Builder
	builder.WriteString("Orders(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", o.UserID))
	builder.WriteString(", ")
	builder.WriteString("order_sn=")
	builder.WriteString(o.OrderSn)
	builder.WriteString(", ")
	builder.WriteString("pay_type=")
	builder.WriteString(fmt.Sprintf("%v", o.PayType))
	builder.WriteString(", ")
	builder.WriteString("pay_status=")
	builder.WriteString(fmt.Sprintf("%v", o.PayStatus))
	builder.WriteString(", ")
	builder.WriteString("trade_price=")
	builder.WriteString(fmt.Sprintf("%v", o.TradePrice))
	builder.WriteString(", ")
	builder.WriteString("trade_no=")
	builder.WriteString(o.TradeNo)
	builder.WriteString(", ")
	builder.WriteString("pay_time=")
	builder.WriteString(o.PayTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(o.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(o.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OrdersSlice is a parsable slice of Orders.
type OrdersSlice []*Orders
