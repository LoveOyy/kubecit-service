// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/orders"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrdersCreate is the builder for creating a Orders entity.
type OrdersCreate struct {
	config
	mutation *OrdersMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (oc *OrdersCreate) SetUserID(i int32) *OrdersCreate {
	oc.mutation.SetUserID(i)
	return oc
}

// SetOrderSn sets the "order_sn" field.
func (oc *OrdersCreate) SetOrderSn(s string) *OrdersCreate {
	oc.mutation.SetOrderSn(s)
	return oc
}

// SetPayType sets the "pay_type" field.
func (oc *OrdersCreate) SetPayType(i int32) *OrdersCreate {
	oc.mutation.SetPayType(i)
	return oc
}

// SetNillablePayType sets the "pay_type" field if the given value is not nil.
func (oc *OrdersCreate) SetNillablePayType(i *int32) *OrdersCreate {
	if i != nil {
		oc.SetPayType(*i)
	}
	return oc
}

// SetPayStatus sets the "pay_status" field.
func (oc *OrdersCreate) SetPayStatus(i int32) *OrdersCreate {
	oc.mutation.SetPayStatus(i)
	return oc
}

// SetNillablePayStatus sets the "pay_status" field if the given value is not nil.
func (oc *OrdersCreate) SetNillablePayStatus(i *int32) *OrdersCreate {
	if i != nil {
		oc.SetPayStatus(*i)
	}
	return oc
}

// SetTradePrice sets the "trade_price" field.
func (oc *OrdersCreate) SetTradePrice(i int32) *OrdersCreate {
	oc.mutation.SetTradePrice(i)
	return oc
}

// SetTradeNo sets the "trade_no" field.
func (oc *OrdersCreate) SetTradeNo(s string) *OrdersCreate {
	oc.mutation.SetTradeNo(s)
	return oc
}

// SetNillableTradeNo sets the "trade_no" field if the given value is not nil.
func (oc *OrdersCreate) SetNillableTradeNo(s *string) *OrdersCreate {
	if s != nil {
		oc.SetTradeNo(*s)
	}
	return oc
}

// SetPayTime sets the "pay_time" field.
func (oc *OrdersCreate) SetPayTime(t time.Time) *OrdersCreate {
	oc.mutation.SetPayTime(t)
	return oc
}

// SetNillablePayTime sets the "pay_time" field if the given value is not nil.
func (oc *OrdersCreate) SetNillablePayTime(t *time.Time) *OrdersCreate {
	if t != nil {
		oc.SetPayTime(*t)
	}
	return oc
}

// SetCreateTime sets the "create_time" field.
func (oc *OrdersCreate) SetCreateTime(t time.Time) *OrdersCreate {
	oc.mutation.SetCreateTime(t)
	return oc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (oc *OrdersCreate) SetNillableCreateTime(t *time.Time) *OrdersCreate {
	if t != nil {
		oc.SetCreateTime(*t)
	}
	return oc
}

// SetUpdateTime sets the "update_time" field.
func (oc *OrdersCreate) SetUpdateTime(t time.Time) *OrdersCreate {
	oc.mutation.SetUpdateTime(t)
	return oc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (oc *OrdersCreate) SetNillableUpdateTime(t *time.Time) *OrdersCreate {
	if t != nil {
		oc.SetUpdateTime(*t)
	}
	return oc
}

// Mutation returns the OrdersMutation object of the builder.
func (oc *OrdersCreate) Mutation() *OrdersMutation {
	return oc.mutation
}

// Save creates the Orders in the database.
func (oc *OrdersCreate) Save(ctx context.Context) (*Orders, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrdersCreate) SaveX(ctx context.Context) *Orders {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrdersCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrdersCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrdersCreate) defaults() {
	if _, ok := oc.mutation.PayType(); !ok {
		v := orders.DefaultPayType
		oc.mutation.SetPayType(v)
	}
	if _, ok := oc.mutation.PayStatus(); !ok {
		v := orders.DefaultPayStatus
		oc.mutation.SetPayStatus(v)
	}
	if _, ok := oc.mutation.CreateTime(); !ok {
		v := orders.DefaultCreateTime
		oc.mutation.SetCreateTime(v)
	}
	if _, ok := oc.mutation.UpdateTime(); !ok {
		v := orders.DefaultUpdateTime
		oc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrdersCreate) check() error {
	if _, ok := oc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Orders.user_id"`)}
	}
	if _, ok := oc.mutation.OrderSn(); !ok {
		return &ValidationError{Name: "order_sn", err: errors.New(`ent: missing required field "Orders.order_sn"`)}
	}
	if _, ok := oc.mutation.PayType(); !ok {
		return &ValidationError{Name: "pay_type", err: errors.New(`ent: missing required field "Orders.pay_type"`)}
	}
	if _, ok := oc.mutation.TradePrice(); !ok {
		return &ValidationError{Name: "trade_price", err: errors.New(`ent: missing required field "Orders.trade_price"`)}
	}
	if _, ok := oc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Orders.create_time"`)}
	}
	if _, ok := oc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Orders.update_time"`)}
	}
	return nil
}

func (oc *OrdersCreate) sqlSave(ctx context.Context) (*Orders, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrdersCreate) createSpec() (*Orders, *sqlgraph.CreateSpec) {
	var (
		_node = &Orders{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(orders.Table, sqlgraph.NewFieldSpec(orders.FieldID, field.TypeInt))
	)
	if value, ok := oc.mutation.UserID(); ok {
		_spec.SetField(orders.FieldUserID, field.TypeInt32, value)
		_node.UserID = value
	}
	if value, ok := oc.mutation.OrderSn(); ok {
		_spec.SetField(orders.FieldOrderSn, field.TypeString, value)
		_node.OrderSn = value
	}
	if value, ok := oc.mutation.PayType(); ok {
		_spec.SetField(orders.FieldPayType, field.TypeInt32, value)
		_node.PayType = value
	}
	if value, ok := oc.mutation.PayStatus(); ok {
		_spec.SetField(orders.FieldPayStatus, field.TypeInt32, value)
		_node.PayStatus = value
	}
	if value, ok := oc.mutation.TradePrice(); ok {
		_spec.SetField(orders.FieldTradePrice, field.TypeInt32, value)
		_node.TradePrice = value
	}
	if value, ok := oc.mutation.TradeNo(); ok {
		_spec.SetField(orders.FieldTradeNo, field.TypeString, value)
		_node.TradeNo = value
	}
	if value, ok := oc.mutation.PayTime(); ok {
		_spec.SetField(orders.FieldPayTime, field.TypeTime, value)
		_node.PayTime = value
	}
	if value, ok := oc.mutation.CreateTime(); ok {
		_spec.SetField(orders.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := oc.mutation.UpdateTime(); ok {
		_spec.SetField(orders.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// OrdersCreateBulk is the builder for creating many Orders entities in bulk.
type OrdersCreateBulk struct {
	config
	builders []*OrdersCreate
}

// Save creates the Orders entities in the database.
func (ocb *OrdersCreateBulk) Save(ctx context.Context) ([]*Orders, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Orders, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrdersMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrdersCreateBulk) SaveX(ctx context.Context) []*Orders {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrdersCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrdersCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
