// Code generated by ent, DO NOT EDIT.

package chapter

import (
	"kubecit-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Chapter {
	return predicate.Chapter(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Chapter {
	return predicate.Chapter(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Chapter {
	return predicate.Chapter(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Chapter {
	return predicate.Chapter(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Chapter {
	return predicate.Chapter(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Chapter {
	return predicate.Chapter(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Chapter {
	return predicate.Chapter(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldName, v))
}

// ReleasedTime applies equality check predicate on the "released_time" field. It's identical to ReleasedTimeEQ.
func ReleasedTime(v time.Time) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldReleasedTime, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldDescription, v))
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldSort, v))
}

// CourseID applies equality check predicate on the "course_id" field. It's identical to CourseIDEQ.
func CourseID(v int) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldCourseID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Chapter {
	return predicate.Chapter(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Chapter {
	return predicate.Chapter(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldContainsFold(FieldName, v))
}

// ReleasedTimeEQ applies the EQ predicate on the "released_time" field.
func ReleasedTimeEQ(v time.Time) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldReleasedTime, v))
}

// ReleasedTimeNEQ applies the NEQ predicate on the "released_time" field.
func ReleasedTimeNEQ(v time.Time) predicate.Chapter {
	return predicate.Chapter(sql.FieldNEQ(FieldReleasedTime, v))
}

// ReleasedTimeIn applies the In predicate on the "released_time" field.
func ReleasedTimeIn(vs ...time.Time) predicate.Chapter {
	return predicate.Chapter(sql.FieldIn(FieldReleasedTime, vs...))
}

// ReleasedTimeNotIn applies the NotIn predicate on the "released_time" field.
func ReleasedTimeNotIn(vs ...time.Time) predicate.Chapter {
	return predicate.Chapter(sql.FieldNotIn(FieldReleasedTime, vs...))
}

// ReleasedTimeGT applies the GT predicate on the "released_time" field.
func ReleasedTimeGT(v time.Time) predicate.Chapter {
	return predicate.Chapter(sql.FieldGT(FieldReleasedTime, v))
}

// ReleasedTimeGTE applies the GTE predicate on the "released_time" field.
func ReleasedTimeGTE(v time.Time) predicate.Chapter {
	return predicate.Chapter(sql.FieldGTE(FieldReleasedTime, v))
}

// ReleasedTimeLT applies the LT predicate on the "released_time" field.
func ReleasedTimeLT(v time.Time) predicate.Chapter {
	return predicate.Chapter(sql.FieldLT(FieldReleasedTime, v))
}

// ReleasedTimeLTE applies the LTE predicate on the "released_time" field.
func ReleasedTimeLTE(v time.Time) predicate.Chapter {
	return predicate.Chapter(sql.FieldLTE(FieldReleasedTime, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Chapter {
	return predicate.Chapter(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Chapter {
	return predicate.Chapter(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Chapter {
	return predicate.Chapter(sql.FieldContainsFold(FieldDescription, v))
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldSort, v))
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int) predicate.Chapter {
	return predicate.Chapter(sql.FieldNEQ(FieldSort, v))
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int) predicate.Chapter {
	return predicate.Chapter(sql.FieldIn(FieldSort, vs...))
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int) predicate.Chapter {
	return predicate.Chapter(sql.FieldNotIn(FieldSort, vs...))
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int) predicate.Chapter {
	return predicate.Chapter(sql.FieldGT(FieldSort, v))
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int) predicate.Chapter {
	return predicate.Chapter(sql.FieldGTE(FieldSort, v))
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int) predicate.Chapter {
	return predicate.Chapter(sql.FieldLT(FieldSort, v))
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int) predicate.Chapter {
	return predicate.Chapter(sql.FieldLTE(FieldSort, v))
}

// CourseIDEQ applies the EQ predicate on the "course_id" field.
func CourseIDEQ(v int) predicate.Chapter {
	return predicate.Chapter(sql.FieldEQ(FieldCourseID, v))
}

// CourseIDNEQ applies the NEQ predicate on the "course_id" field.
func CourseIDNEQ(v int) predicate.Chapter {
	return predicate.Chapter(sql.FieldNEQ(FieldCourseID, v))
}

// CourseIDIn applies the In predicate on the "course_id" field.
func CourseIDIn(vs ...int) predicate.Chapter {
	return predicate.Chapter(sql.FieldIn(FieldCourseID, vs...))
}

// CourseIDNotIn applies the NotIn predicate on the "course_id" field.
func CourseIDNotIn(vs ...int) predicate.Chapter {
	return predicate.Chapter(sql.FieldNotIn(FieldCourseID, vs...))
}

// CourseIDIsNil applies the IsNil predicate on the "course_id" field.
func CourseIDIsNil() predicate.Chapter {
	return predicate.Chapter(sql.FieldIsNull(FieldCourseID))
}

// CourseIDNotNil applies the NotNil predicate on the "course_id" field.
func CourseIDNotNil() predicate.Chapter {
	return predicate.Chapter(sql.FieldNotNull(FieldCourseID))
}

// HasLessons applies the HasEdge predicate on the "lessons" edge.
func HasLessons() predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LessonsTable, LessonsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLessonsWith applies the HasEdge predicate on the "lessons" edge with a given conditions (other predicates).
func HasLessonsWith(preds ...predicate.Lesson) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		step := newLessonsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourse applies the HasEdge predicate on the "course" edge.
func HasCourse() predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseWith applies the HasEdge predicate on the "course" edge with a given conditions (other predicates).
func HasCourseWith(preds ...predicate.Course) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		step := newCourseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Chapter) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Chapter) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Chapter) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		p(s.Not())
	})
}
