// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kubecit-service/ent/wallet"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Wallet is the model entity for the Wallet schema.
type Wallet struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 金叶子,分为单位
	GoldLeaf int32 `json:"gold_leaf,omitempty"`
	// 银叶子,分为单位
	SilverLeaf int32 `json:"silver_leaf,omitempty"`
	// 冻结金叶子,分为单位
	FrozenGoldLeaf int32 `json:"frozen_gold_leaf,omitempty"`
	// 冻结银叶子,分为单位
	FrozenSilverLeaf int32 `json:"frozen_silver_leaf,omitempty"`
	// 用户ID
	UserID int32 `json:"user_id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Wallet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case wallet.FieldID, wallet.FieldGoldLeaf, wallet.FieldSilverLeaf, wallet.FieldFrozenGoldLeaf, wallet.FieldFrozenSilverLeaf, wallet.FieldUserID:
			values[i] = new(sql.NullInt64)
		case wallet.FieldCreatedAt, wallet.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Wallet fields.
func (w *Wallet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wallet.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case wallet.FieldGoldLeaf:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gold_leaf", values[i])
			} else if value.Valid {
				w.GoldLeaf = int32(value.Int64)
			}
		case wallet.FieldSilverLeaf:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field silver_leaf", values[i])
			} else if value.Valid {
				w.SilverLeaf = int32(value.Int64)
			}
		case wallet.FieldFrozenGoldLeaf:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field frozen_gold_leaf", values[i])
			} else if value.Valid {
				w.FrozenGoldLeaf = int32(value.Int64)
			}
		case wallet.FieldFrozenSilverLeaf:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field frozen_silver_leaf", values[i])
			} else if value.Valid {
				w.FrozenSilverLeaf = int32(value.Int64)
			}
		case wallet.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				w.UserID = int32(value.Int64)
			}
		case wallet.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case wallet.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				w.UpdatedAt = value.Time
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Wallet.
// This includes values selected through modifiers, order, etc.
func (w *Wallet) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// Update returns a builder for updating this Wallet.
// Note that you need to call Wallet.Unwrap() before calling this method if this Wallet
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Wallet) Update() *WalletUpdateOne {
	return NewWalletClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Wallet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Wallet) Unwrap() *Wallet {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Wallet is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Wallet) String() string {
	var builder strings.Builder
	builder.WriteString("Wallet(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("gold_leaf=")
	builder.WriteString(fmt.Sprintf("%v", w.GoldLeaf))
	builder.WriteString(", ")
	builder.WriteString("silver_leaf=")
	builder.WriteString(fmt.Sprintf("%v", w.SilverLeaf))
	builder.WriteString(", ")
	builder.WriteString("frozen_gold_leaf=")
	builder.WriteString(fmt.Sprintf("%v", w.FrozenGoldLeaf))
	builder.WriteString(", ")
	builder.WriteString("frozen_silver_leaf=")
	builder.WriteString(fmt.Sprintf("%v", w.FrozenSilverLeaf))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", w.UserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(w.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Wallets is a parsable slice of Wallet.
type Wallets []*Wallet
