// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/chapter"
	"kubecit-service/ent/lesson"
	"kubecit-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LessonUpdate is the builder for updating Lesson entities.
type LessonUpdate struct {
	config
	hooks    []Hook
	mutation *LessonMutation
}

// Where appends a list predicates to the LessonUpdate builder.
func (lu *LessonUpdate) Where(ps ...predicate.Lesson) *LessonUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetName sets the "name" field.
func (lu *LessonUpdate) SetName(s string) *LessonUpdate {
	lu.mutation.SetName(s)
	return lu
}

// SetReleasedTime sets the "released_time" field.
func (lu *LessonUpdate) SetReleasedTime(t time.Time) *LessonUpdate {
	lu.mutation.SetReleasedTime(t)
	return lu
}

// SetSort sets the "sort" field.
func (lu *LessonUpdate) SetSort(i int) *LessonUpdate {
	lu.mutation.ResetSort()
	lu.mutation.SetSort(i)
	return lu
}

// AddSort adds i to the "sort" field.
func (lu *LessonUpdate) AddSort(i int) *LessonUpdate {
	lu.mutation.AddSort(i)
	return lu
}

// SetType sets the "type" field.
func (lu *LessonUpdate) SetType(i int) *LessonUpdate {
	lu.mutation.ResetType()
	lu.mutation.SetType(i)
	return lu
}

// AddType adds i to the "type" field.
func (lu *LessonUpdate) AddType(i int) *LessonUpdate {
	lu.mutation.AddType(i)
	return lu
}

// SetStoragePath sets the "storage_path" field.
func (lu *LessonUpdate) SetStoragePath(s string) *LessonUpdate {
	lu.mutation.SetStoragePath(s)
	return lu
}

// SetSource sets the "source" field.
func (lu *LessonUpdate) SetSource(s string) *LessonUpdate {
	lu.mutation.SetSource(s)
	return lu
}

// SetCourseware sets the "courseware" field.
func (lu *LessonUpdate) SetCourseware(s string) *LessonUpdate {
	lu.mutation.SetCourseware(s)
	return lu
}

// SetIsFreePreview sets the "is_free_preview" field.
func (lu *LessonUpdate) SetIsFreePreview(i int) *LessonUpdate {
	lu.mutation.ResetIsFreePreview()
	lu.mutation.SetIsFreePreview(i)
	return lu
}

// SetNillableIsFreePreview sets the "is_free_preview" field if the given value is not nil.
func (lu *LessonUpdate) SetNillableIsFreePreview(i *int) *LessonUpdate {
	if i != nil {
		lu.SetIsFreePreview(*i)
	}
	return lu
}

// AddIsFreePreview adds i to the "is_free_preview" field.
func (lu *LessonUpdate) AddIsFreePreview(i int) *LessonUpdate {
	lu.mutation.AddIsFreePreview(i)
	return lu
}

// SetChapterID sets the "chapter_id" field.
func (lu *LessonUpdate) SetChapterID(i int) *LessonUpdate {
	lu.mutation.SetChapterID(i)
	return lu
}

// SetNillableChapterID sets the "chapter_id" field if the given value is not nil.
func (lu *LessonUpdate) SetNillableChapterID(i *int) *LessonUpdate {
	if i != nil {
		lu.SetChapterID(*i)
	}
	return lu
}

// ClearChapterID clears the value of the "chapter_id" field.
func (lu *LessonUpdate) ClearChapterID() *LessonUpdate {
	lu.mutation.ClearChapterID()
	return lu
}

// SetChapter sets the "chapter" edge to the Chapter entity.
func (lu *LessonUpdate) SetChapter(c *Chapter) *LessonUpdate {
	return lu.SetChapterID(c.ID)
}

// Mutation returns the LessonMutation object of the builder.
func (lu *LessonUpdate) Mutation() *LessonMutation {
	return lu.mutation
}

// ClearChapter clears the "chapter" edge to the Chapter entity.
func (lu *LessonUpdate) ClearChapter() *LessonUpdate {
	lu.mutation.ClearChapter()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LessonUpdate) Save(ctx context.Context) (int, error) {
	lu.defaults()
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LessonUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LessonUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LessonUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LessonUpdate) defaults() {
	if _, ok := lu.mutation.ReleasedTime(); !ok {
		v := lesson.UpdateDefaultReleasedTime()
		lu.mutation.SetReleasedTime(v)
	}
}

func (lu *LessonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(lesson.Table, lesson.Columns, sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.SetField(lesson.FieldName, field.TypeString, value)
	}
	if value, ok := lu.mutation.ReleasedTime(); ok {
		_spec.SetField(lesson.FieldReleasedTime, field.TypeTime, value)
	}
	if value, ok := lu.mutation.Sort(); ok {
		_spec.SetField(lesson.FieldSort, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedSort(); ok {
		_spec.AddField(lesson.FieldSort, field.TypeInt, value)
	}
	if value, ok := lu.mutation.GetType(); ok {
		_spec.SetField(lesson.FieldType, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedType(); ok {
		_spec.AddField(lesson.FieldType, field.TypeInt, value)
	}
	if value, ok := lu.mutation.StoragePath(); ok {
		_spec.SetField(lesson.FieldStoragePath, field.TypeString, value)
	}
	if value, ok := lu.mutation.Source(); ok {
		_spec.SetField(lesson.FieldSource, field.TypeString, value)
	}
	if value, ok := lu.mutation.Courseware(); ok {
		_spec.SetField(lesson.FieldCourseware, field.TypeString, value)
	}
	if value, ok := lu.mutation.IsFreePreview(); ok {
		_spec.SetField(lesson.FieldIsFreePreview, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedIsFreePreview(); ok {
		_spec.AddField(lesson.FieldIsFreePreview, field.TypeInt, value)
	}
	if lu.mutation.ChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lesson.ChapterTable,
			Columns: []string{lesson.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lesson.ChapterTable,
			Columns: []string{lesson.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lesson.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LessonUpdateOne is the builder for updating a single Lesson entity.
type LessonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LessonMutation
}

// SetName sets the "name" field.
func (luo *LessonUpdateOne) SetName(s string) *LessonUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// SetReleasedTime sets the "released_time" field.
func (luo *LessonUpdateOne) SetReleasedTime(t time.Time) *LessonUpdateOne {
	luo.mutation.SetReleasedTime(t)
	return luo
}

// SetSort sets the "sort" field.
func (luo *LessonUpdateOne) SetSort(i int) *LessonUpdateOne {
	luo.mutation.ResetSort()
	luo.mutation.SetSort(i)
	return luo
}

// AddSort adds i to the "sort" field.
func (luo *LessonUpdateOne) AddSort(i int) *LessonUpdateOne {
	luo.mutation.AddSort(i)
	return luo
}

// SetType sets the "type" field.
func (luo *LessonUpdateOne) SetType(i int) *LessonUpdateOne {
	luo.mutation.ResetType()
	luo.mutation.SetType(i)
	return luo
}

// AddType adds i to the "type" field.
func (luo *LessonUpdateOne) AddType(i int) *LessonUpdateOne {
	luo.mutation.AddType(i)
	return luo
}

// SetStoragePath sets the "storage_path" field.
func (luo *LessonUpdateOne) SetStoragePath(s string) *LessonUpdateOne {
	luo.mutation.SetStoragePath(s)
	return luo
}

// SetSource sets the "source" field.
func (luo *LessonUpdateOne) SetSource(s string) *LessonUpdateOne {
	luo.mutation.SetSource(s)
	return luo
}

// SetCourseware sets the "courseware" field.
func (luo *LessonUpdateOne) SetCourseware(s string) *LessonUpdateOne {
	luo.mutation.SetCourseware(s)
	return luo
}

// SetIsFreePreview sets the "is_free_preview" field.
func (luo *LessonUpdateOne) SetIsFreePreview(i int) *LessonUpdateOne {
	luo.mutation.ResetIsFreePreview()
	luo.mutation.SetIsFreePreview(i)
	return luo
}

// SetNillableIsFreePreview sets the "is_free_preview" field if the given value is not nil.
func (luo *LessonUpdateOne) SetNillableIsFreePreview(i *int) *LessonUpdateOne {
	if i != nil {
		luo.SetIsFreePreview(*i)
	}
	return luo
}

// AddIsFreePreview adds i to the "is_free_preview" field.
func (luo *LessonUpdateOne) AddIsFreePreview(i int) *LessonUpdateOne {
	luo.mutation.AddIsFreePreview(i)
	return luo
}

// SetChapterID sets the "chapter_id" field.
func (luo *LessonUpdateOne) SetChapterID(i int) *LessonUpdateOne {
	luo.mutation.SetChapterID(i)
	return luo
}

// SetNillableChapterID sets the "chapter_id" field if the given value is not nil.
func (luo *LessonUpdateOne) SetNillableChapterID(i *int) *LessonUpdateOne {
	if i != nil {
		luo.SetChapterID(*i)
	}
	return luo
}

// ClearChapterID clears the value of the "chapter_id" field.
func (luo *LessonUpdateOne) ClearChapterID() *LessonUpdateOne {
	luo.mutation.ClearChapterID()
	return luo
}

// SetChapter sets the "chapter" edge to the Chapter entity.
func (luo *LessonUpdateOne) SetChapter(c *Chapter) *LessonUpdateOne {
	return luo.SetChapterID(c.ID)
}

// Mutation returns the LessonMutation object of the builder.
func (luo *LessonUpdateOne) Mutation() *LessonMutation {
	return luo.mutation
}

// ClearChapter clears the "chapter" edge to the Chapter entity.
func (luo *LessonUpdateOne) ClearChapter() *LessonUpdateOne {
	luo.mutation.ClearChapter()
	return luo
}

// Where appends a list predicates to the LessonUpdate builder.
func (luo *LessonUpdateOne) Where(ps ...predicate.Lesson) *LessonUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LessonUpdateOne) Select(field string, fields ...string) *LessonUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Lesson entity.
func (luo *LessonUpdateOne) Save(ctx context.Context) (*Lesson, error) {
	luo.defaults()
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LessonUpdateOne) SaveX(ctx context.Context) *Lesson {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LessonUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LessonUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LessonUpdateOne) defaults() {
	if _, ok := luo.mutation.ReleasedTime(); !ok {
		v := lesson.UpdateDefaultReleasedTime()
		luo.mutation.SetReleasedTime(v)
	}
}

func (luo *LessonUpdateOne) sqlSave(ctx context.Context) (_node *Lesson, err error) {
	_spec := sqlgraph.NewUpdateSpec(lesson.Table, lesson.Columns, sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Lesson.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lesson.FieldID)
		for _, f := range fields {
			if !lesson.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lesson.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Name(); ok {
		_spec.SetField(lesson.FieldName, field.TypeString, value)
	}
	if value, ok := luo.mutation.ReleasedTime(); ok {
		_spec.SetField(lesson.FieldReleasedTime, field.TypeTime, value)
	}
	if value, ok := luo.mutation.Sort(); ok {
		_spec.SetField(lesson.FieldSort, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedSort(); ok {
		_spec.AddField(lesson.FieldSort, field.TypeInt, value)
	}
	if value, ok := luo.mutation.GetType(); ok {
		_spec.SetField(lesson.FieldType, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedType(); ok {
		_spec.AddField(lesson.FieldType, field.TypeInt, value)
	}
	if value, ok := luo.mutation.StoragePath(); ok {
		_spec.SetField(lesson.FieldStoragePath, field.TypeString, value)
	}
	if value, ok := luo.mutation.Source(); ok {
		_spec.SetField(lesson.FieldSource, field.TypeString, value)
	}
	if value, ok := luo.mutation.Courseware(); ok {
		_spec.SetField(lesson.FieldCourseware, field.TypeString, value)
	}
	if value, ok := luo.mutation.IsFreePreview(); ok {
		_spec.SetField(lesson.FieldIsFreePreview, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedIsFreePreview(); ok {
		_spec.AddField(lesson.FieldIsFreePreview, field.TypeInt, value)
	}
	if luo.mutation.ChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lesson.ChapterTable,
			Columns: []string{lesson.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lesson.ChapterTable,
			Columns: []string{lesson.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Lesson{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lesson.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
