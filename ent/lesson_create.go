// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/chapter"
	"kubecit-service/ent/lesson"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LessonCreate is the builder for creating a Lesson entity.
type LessonCreate struct {
	config
	mutation *LessonMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (lc *LessonCreate) SetName(s string) *LessonCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetReleasedTime sets the "released_time" field.
func (lc *LessonCreate) SetReleasedTime(t time.Time) *LessonCreate {
	lc.mutation.SetReleasedTime(t)
	return lc
}

// SetNillableReleasedTime sets the "released_time" field if the given value is not nil.
func (lc *LessonCreate) SetNillableReleasedTime(t *time.Time) *LessonCreate {
	if t != nil {
		lc.SetReleasedTime(*t)
	}
	return lc
}

// SetSort sets the "sort" field.
func (lc *LessonCreate) SetSort(i int) *LessonCreate {
	lc.mutation.SetSort(i)
	return lc
}

// SetType sets the "type" field.
func (lc *LessonCreate) SetType(i int) *LessonCreate {
	lc.mutation.SetType(i)
	return lc
}

// SetStoragePath sets the "storage_path" field.
func (lc *LessonCreate) SetStoragePath(s string) *LessonCreate {
	lc.mutation.SetStoragePath(s)
	return lc
}

// SetSource sets the "source" field.
func (lc *LessonCreate) SetSource(s string) *LessonCreate {
	lc.mutation.SetSource(s)
	return lc
}

// SetCourseware sets the "courseware" field.
func (lc *LessonCreate) SetCourseware(s string) *LessonCreate {
	lc.mutation.SetCourseware(s)
	return lc
}

// SetIsFreePreview sets the "is_free_preview" field.
func (lc *LessonCreate) SetIsFreePreview(i int) *LessonCreate {
	lc.mutation.SetIsFreePreview(i)
	return lc
}

// SetNillableIsFreePreview sets the "is_free_preview" field if the given value is not nil.
func (lc *LessonCreate) SetNillableIsFreePreview(i *int) *LessonCreate {
	if i != nil {
		lc.SetIsFreePreview(*i)
	}
	return lc
}

// SetChapterID sets the "chapter_id" field.
func (lc *LessonCreate) SetChapterID(i int) *LessonCreate {
	lc.mutation.SetChapterID(i)
	return lc
}

// SetNillableChapterID sets the "chapter_id" field if the given value is not nil.
func (lc *LessonCreate) SetNillableChapterID(i *int) *LessonCreate {
	if i != nil {
		lc.SetChapterID(*i)
	}
	return lc
}

// SetChapter sets the "chapter" edge to the Chapter entity.
func (lc *LessonCreate) SetChapter(c *Chapter) *LessonCreate {
	return lc.SetChapterID(c.ID)
}

// Mutation returns the LessonMutation object of the builder.
func (lc *LessonCreate) Mutation() *LessonMutation {
	return lc.mutation
}

// Save creates the Lesson in the database.
func (lc *LessonCreate) Save(ctx context.Context) (*Lesson, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LessonCreate) SaveX(ctx context.Context) *Lesson {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LessonCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LessonCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LessonCreate) defaults() {
	if _, ok := lc.mutation.ReleasedTime(); !ok {
		v := lesson.DefaultReleasedTime()
		lc.mutation.SetReleasedTime(v)
	}
	if _, ok := lc.mutation.IsFreePreview(); !ok {
		v := lesson.DefaultIsFreePreview
		lc.mutation.SetIsFreePreview(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LessonCreate) check() error {
	if _, ok := lc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Lesson.name"`)}
	}
	if _, ok := lc.mutation.ReleasedTime(); !ok {
		return &ValidationError{Name: "released_time", err: errors.New(`ent: missing required field "Lesson.released_time"`)}
	}
	if _, ok := lc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "Lesson.sort"`)}
	}
	if _, ok := lc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Lesson.type"`)}
	}
	if _, ok := lc.mutation.StoragePath(); !ok {
		return &ValidationError{Name: "storage_path", err: errors.New(`ent: missing required field "Lesson.storage_path"`)}
	}
	if _, ok := lc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "Lesson.source"`)}
	}
	if _, ok := lc.mutation.Courseware(); !ok {
		return &ValidationError{Name: "courseware", err: errors.New(`ent: missing required field "Lesson.courseware"`)}
	}
	if _, ok := lc.mutation.IsFreePreview(); !ok {
		return &ValidationError{Name: "is_free_preview", err: errors.New(`ent: missing required field "Lesson.is_free_preview"`)}
	}
	return nil
}

func (lc *LessonCreate) sqlSave(ctx context.Context) (*Lesson, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LessonCreate) createSpec() (*Lesson, *sqlgraph.CreateSpec) {
	var (
		_node = &Lesson{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(lesson.Table, sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt))
	)
	if value, ok := lc.mutation.Name(); ok {
		_spec.SetField(lesson.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lc.mutation.ReleasedTime(); ok {
		_spec.SetField(lesson.FieldReleasedTime, field.TypeTime, value)
		_node.ReleasedTime = value
	}
	if value, ok := lc.mutation.Sort(); ok {
		_spec.SetField(lesson.FieldSort, field.TypeInt, value)
		_node.Sort = value
	}
	if value, ok := lc.mutation.GetType(); ok {
		_spec.SetField(lesson.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	if value, ok := lc.mutation.StoragePath(); ok {
		_spec.SetField(lesson.FieldStoragePath, field.TypeString, value)
		_node.StoragePath = value
	}
	if value, ok := lc.mutation.Source(); ok {
		_spec.SetField(lesson.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := lc.mutation.Courseware(); ok {
		_spec.SetField(lesson.FieldCourseware, field.TypeString, value)
		_node.Courseware = value
	}
	if value, ok := lc.mutation.IsFreePreview(); ok {
		_spec.SetField(lesson.FieldIsFreePreview, field.TypeInt, value)
		_node.IsFreePreview = value
	}
	if nodes := lc.mutation.ChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lesson.ChapterTable,
			Columns: []string{lesson.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ChapterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LessonCreateBulk is the builder for creating many Lesson entities in bulk.
type LessonCreateBulk struct {
	config
	builders []*LessonCreate
}

// Save creates the Lesson entities in the database.
func (lcb *LessonCreateBulk) Save(ctx context.Context) ([]*Lesson, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Lesson, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LessonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LessonCreateBulk) SaveX(ctx context.Context) []*Lesson {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LessonCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LessonCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
