// Code generated by ent, DO NOT EDIT.

package lesson

import (
	"kubecit-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Lesson {
	return predicate.Lesson(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Lesson {
	return predicate.Lesson(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Lesson {
	return predicate.Lesson(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Lesson {
	return predicate.Lesson(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Lesson {
	return predicate.Lesson(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Lesson {
	return predicate.Lesson(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Lesson {
	return predicate.Lesson(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldName, v))
}

// ReleasedTime applies equality check predicate on the "released_time" field. It's identical to ReleasedTimeEQ.
func ReleasedTime(v time.Time) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldReleasedTime, v))
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldSort, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldType, v))
}

// StoragePath applies equality check predicate on the "storage_path" field. It's identical to StoragePathEQ.
func StoragePath(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldStoragePath, v))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldSource, v))
}

// Courseware applies equality check predicate on the "courseware" field. It's identical to CoursewareEQ.
func Courseware(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldCourseware, v))
}

// IsFreePreview applies equality check predicate on the "is_free_preview" field. It's identical to IsFreePreviewEQ.
func IsFreePreview(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldIsFreePreview, v))
}

// ChapterID applies equality check predicate on the "chapter_id" field. It's identical to ChapterIDEQ.
func ChapterID(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldChapterID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Lesson {
	return predicate.Lesson(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Lesson {
	return predicate.Lesson(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldContainsFold(FieldName, v))
}

// ReleasedTimeEQ applies the EQ predicate on the "released_time" field.
func ReleasedTimeEQ(v time.Time) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldReleasedTime, v))
}

// ReleasedTimeNEQ applies the NEQ predicate on the "released_time" field.
func ReleasedTimeNEQ(v time.Time) predicate.Lesson {
	return predicate.Lesson(sql.FieldNEQ(FieldReleasedTime, v))
}

// ReleasedTimeIn applies the In predicate on the "released_time" field.
func ReleasedTimeIn(vs ...time.Time) predicate.Lesson {
	return predicate.Lesson(sql.FieldIn(FieldReleasedTime, vs...))
}

// ReleasedTimeNotIn applies the NotIn predicate on the "released_time" field.
func ReleasedTimeNotIn(vs ...time.Time) predicate.Lesson {
	return predicate.Lesson(sql.FieldNotIn(FieldReleasedTime, vs...))
}

// ReleasedTimeGT applies the GT predicate on the "released_time" field.
func ReleasedTimeGT(v time.Time) predicate.Lesson {
	return predicate.Lesson(sql.FieldGT(FieldReleasedTime, v))
}

// ReleasedTimeGTE applies the GTE predicate on the "released_time" field.
func ReleasedTimeGTE(v time.Time) predicate.Lesson {
	return predicate.Lesson(sql.FieldGTE(FieldReleasedTime, v))
}

// ReleasedTimeLT applies the LT predicate on the "released_time" field.
func ReleasedTimeLT(v time.Time) predicate.Lesson {
	return predicate.Lesson(sql.FieldLT(FieldReleasedTime, v))
}

// ReleasedTimeLTE applies the LTE predicate on the "released_time" field.
func ReleasedTimeLTE(v time.Time) predicate.Lesson {
	return predicate.Lesson(sql.FieldLTE(FieldReleasedTime, v))
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldSort, v))
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldNEQ(FieldSort, v))
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int) predicate.Lesson {
	return predicate.Lesson(sql.FieldIn(FieldSort, vs...))
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int) predicate.Lesson {
	return predicate.Lesson(sql.FieldNotIn(FieldSort, vs...))
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldGT(FieldSort, v))
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldGTE(FieldSort, v))
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldLT(FieldSort, v))
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldLTE(FieldSort, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int) predicate.Lesson {
	return predicate.Lesson(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int) predicate.Lesson {
	return predicate.Lesson(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldLTE(FieldType, v))
}

// StoragePathEQ applies the EQ predicate on the "storage_path" field.
func StoragePathEQ(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldStoragePath, v))
}

// StoragePathNEQ applies the NEQ predicate on the "storage_path" field.
func StoragePathNEQ(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldNEQ(FieldStoragePath, v))
}

// StoragePathIn applies the In predicate on the "storage_path" field.
func StoragePathIn(vs ...string) predicate.Lesson {
	return predicate.Lesson(sql.FieldIn(FieldStoragePath, vs...))
}

// StoragePathNotIn applies the NotIn predicate on the "storage_path" field.
func StoragePathNotIn(vs ...string) predicate.Lesson {
	return predicate.Lesson(sql.FieldNotIn(FieldStoragePath, vs...))
}

// StoragePathGT applies the GT predicate on the "storage_path" field.
func StoragePathGT(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldGT(FieldStoragePath, v))
}

// StoragePathGTE applies the GTE predicate on the "storage_path" field.
func StoragePathGTE(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldGTE(FieldStoragePath, v))
}

// StoragePathLT applies the LT predicate on the "storage_path" field.
func StoragePathLT(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldLT(FieldStoragePath, v))
}

// StoragePathLTE applies the LTE predicate on the "storage_path" field.
func StoragePathLTE(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldLTE(FieldStoragePath, v))
}

// StoragePathContains applies the Contains predicate on the "storage_path" field.
func StoragePathContains(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldContains(FieldStoragePath, v))
}

// StoragePathHasPrefix applies the HasPrefix predicate on the "storage_path" field.
func StoragePathHasPrefix(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldHasPrefix(FieldStoragePath, v))
}

// StoragePathHasSuffix applies the HasSuffix predicate on the "storage_path" field.
func StoragePathHasSuffix(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldHasSuffix(FieldStoragePath, v))
}

// StoragePathEqualFold applies the EqualFold predicate on the "storage_path" field.
func StoragePathEqualFold(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldEqualFold(FieldStoragePath, v))
}

// StoragePathContainsFold applies the ContainsFold predicate on the "storage_path" field.
func StoragePathContainsFold(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldContainsFold(FieldStoragePath, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.Lesson {
	return predicate.Lesson(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.Lesson {
	return predicate.Lesson(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldLTE(FieldSource, v))
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldContains(FieldSource, v))
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldHasPrefix(FieldSource, v))
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldHasSuffix(FieldSource, v))
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldEqualFold(FieldSource, v))
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldContainsFold(FieldSource, v))
}

// CoursewareEQ applies the EQ predicate on the "courseware" field.
func CoursewareEQ(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldCourseware, v))
}

// CoursewareNEQ applies the NEQ predicate on the "courseware" field.
func CoursewareNEQ(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldNEQ(FieldCourseware, v))
}

// CoursewareIn applies the In predicate on the "courseware" field.
func CoursewareIn(vs ...string) predicate.Lesson {
	return predicate.Lesson(sql.FieldIn(FieldCourseware, vs...))
}

// CoursewareNotIn applies the NotIn predicate on the "courseware" field.
func CoursewareNotIn(vs ...string) predicate.Lesson {
	return predicate.Lesson(sql.FieldNotIn(FieldCourseware, vs...))
}

// CoursewareGT applies the GT predicate on the "courseware" field.
func CoursewareGT(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldGT(FieldCourseware, v))
}

// CoursewareGTE applies the GTE predicate on the "courseware" field.
func CoursewareGTE(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldGTE(FieldCourseware, v))
}

// CoursewareLT applies the LT predicate on the "courseware" field.
func CoursewareLT(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldLT(FieldCourseware, v))
}

// CoursewareLTE applies the LTE predicate on the "courseware" field.
func CoursewareLTE(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldLTE(FieldCourseware, v))
}

// CoursewareContains applies the Contains predicate on the "courseware" field.
func CoursewareContains(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldContains(FieldCourseware, v))
}

// CoursewareHasPrefix applies the HasPrefix predicate on the "courseware" field.
func CoursewareHasPrefix(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldHasPrefix(FieldCourseware, v))
}

// CoursewareHasSuffix applies the HasSuffix predicate on the "courseware" field.
func CoursewareHasSuffix(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldHasSuffix(FieldCourseware, v))
}

// CoursewareEqualFold applies the EqualFold predicate on the "courseware" field.
func CoursewareEqualFold(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldEqualFold(FieldCourseware, v))
}

// CoursewareContainsFold applies the ContainsFold predicate on the "courseware" field.
func CoursewareContainsFold(v string) predicate.Lesson {
	return predicate.Lesson(sql.FieldContainsFold(FieldCourseware, v))
}

// IsFreePreviewEQ applies the EQ predicate on the "is_free_preview" field.
func IsFreePreviewEQ(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldIsFreePreview, v))
}

// IsFreePreviewNEQ applies the NEQ predicate on the "is_free_preview" field.
func IsFreePreviewNEQ(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldNEQ(FieldIsFreePreview, v))
}

// IsFreePreviewIn applies the In predicate on the "is_free_preview" field.
func IsFreePreviewIn(vs ...int) predicate.Lesson {
	return predicate.Lesson(sql.FieldIn(FieldIsFreePreview, vs...))
}

// IsFreePreviewNotIn applies the NotIn predicate on the "is_free_preview" field.
func IsFreePreviewNotIn(vs ...int) predicate.Lesson {
	return predicate.Lesson(sql.FieldNotIn(FieldIsFreePreview, vs...))
}

// IsFreePreviewGT applies the GT predicate on the "is_free_preview" field.
func IsFreePreviewGT(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldGT(FieldIsFreePreview, v))
}

// IsFreePreviewGTE applies the GTE predicate on the "is_free_preview" field.
func IsFreePreviewGTE(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldGTE(FieldIsFreePreview, v))
}

// IsFreePreviewLT applies the LT predicate on the "is_free_preview" field.
func IsFreePreviewLT(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldLT(FieldIsFreePreview, v))
}

// IsFreePreviewLTE applies the LTE predicate on the "is_free_preview" field.
func IsFreePreviewLTE(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldLTE(FieldIsFreePreview, v))
}

// ChapterIDEQ applies the EQ predicate on the "chapter_id" field.
func ChapterIDEQ(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldEQ(FieldChapterID, v))
}

// ChapterIDNEQ applies the NEQ predicate on the "chapter_id" field.
func ChapterIDNEQ(v int) predicate.Lesson {
	return predicate.Lesson(sql.FieldNEQ(FieldChapterID, v))
}

// ChapterIDIn applies the In predicate on the "chapter_id" field.
func ChapterIDIn(vs ...int) predicate.Lesson {
	return predicate.Lesson(sql.FieldIn(FieldChapterID, vs...))
}

// ChapterIDNotIn applies the NotIn predicate on the "chapter_id" field.
func ChapterIDNotIn(vs ...int) predicate.Lesson {
	return predicate.Lesson(sql.FieldNotIn(FieldChapterID, vs...))
}

// ChapterIDIsNil applies the IsNil predicate on the "chapter_id" field.
func ChapterIDIsNil() predicate.Lesson {
	return predicate.Lesson(sql.FieldIsNull(FieldChapterID))
}

// ChapterIDNotNil applies the NotNil predicate on the "chapter_id" field.
func ChapterIDNotNil() predicate.Lesson {
	return predicate.Lesson(sql.FieldNotNull(FieldChapterID))
}

// HasChapter applies the HasEdge predicate on the "chapter" edge.
func HasChapter() predicate.Lesson {
	return predicate.Lesson(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChapterTable, ChapterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChapterWith applies the HasEdge predicate on the "chapter" edge with a given conditions (other predicates).
func HasChapterWith(preds ...predicate.Chapter) predicate.Lesson {
	return predicate.Lesson(func(s *sql.Selector) {
		step := newChapterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Lesson) predicate.Lesson {
	return predicate.Lesson(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Lesson) predicate.Lesson {
	return predicate.Lesson(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Lesson) predicate.Lesson {
	return predicate.Lesson(func(s *sql.Selector) {
		p(s.Not())
	})
}
