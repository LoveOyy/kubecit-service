// Code generated by ent, DO NOT EDIT.

package orders

import (
	"kubecit-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Orders {
	return predicate.Orders(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Orders {
	return predicate.Orders(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Orders {
	return predicate.Orders(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Orders {
	return predicate.Orders(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Orders {
	return predicate.Orders(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Orders {
	return predicate.Orders(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Orders {
	return predicate.Orders(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldUserID, v))
}

// OrderSn applies equality check predicate on the "order_sn" field. It's identical to OrderSnEQ.
func OrderSn(v string) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldOrderSn, v))
}

// PayType applies equality check predicate on the "pay_type" field. It's identical to PayTypeEQ.
func PayType(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldPayType, v))
}

// PayStatus applies equality check predicate on the "pay_status" field. It's identical to PayStatusEQ.
func PayStatus(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldPayStatus, v))
}

// TradePrice applies equality check predicate on the "trade_price" field. It's identical to TradePriceEQ.
func TradePrice(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldTradePrice, v))
}

// TradeNo applies equality check predicate on the "trade_no" field. It's identical to TradeNoEQ.
func TradeNo(v string) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldTradeNo, v))
}

// PayTime applies equality check predicate on the "pay_time" field. It's identical to PayTimeEQ.
func PayTime(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldPayTime, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldUpdateTime, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int32) predicate.Orders {
	return predicate.Orders(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int32) predicate.Orders {
	return predicate.Orders(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldLTE(FieldUserID, v))
}

// OrderSnEQ applies the EQ predicate on the "order_sn" field.
func OrderSnEQ(v string) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldOrderSn, v))
}

// OrderSnNEQ applies the NEQ predicate on the "order_sn" field.
func OrderSnNEQ(v string) predicate.Orders {
	return predicate.Orders(sql.FieldNEQ(FieldOrderSn, v))
}

// OrderSnIn applies the In predicate on the "order_sn" field.
func OrderSnIn(vs ...string) predicate.Orders {
	return predicate.Orders(sql.FieldIn(FieldOrderSn, vs...))
}

// OrderSnNotIn applies the NotIn predicate on the "order_sn" field.
func OrderSnNotIn(vs ...string) predicate.Orders {
	return predicate.Orders(sql.FieldNotIn(FieldOrderSn, vs...))
}

// OrderSnGT applies the GT predicate on the "order_sn" field.
func OrderSnGT(v string) predicate.Orders {
	return predicate.Orders(sql.FieldGT(FieldOrderSn, v))
}

// OrderSnGTE applies the GTE predicate on the "order_sn" field.
func OrderSnGTE(v string) predicate.Orders {
	return predicate.Orders(sql.FieldGTE(FieldOrderSn, v))
}

// OrderSnLT applies the LT predicate on the "order_sn" field.
func OrderSnLT(v string) predicate.Orders {
	return predicate.Orders(sql.FieldLT(FieldOrderSn, v))
}

// OrderSnLTE applies the LTE predicate on the "order_sn" field.
func OrderSnLTE(v string) predicate.Orders {
	return predicate.Orders(sql.FieldLTE(FieldOrderSn, v))
}

// OrderSnContains applies the Contains predicate on the "order_sn" field.
func OrderSnContains(v string) predicate.Orders {
	return predicate.Orders(sql.FieldContains(FieldOrderSn, v))
}

// OrderSnHasPrefix applies the HasPrefix predicate on the "order_sn" field.
func OrderSnHasPrefix(v string) predicate.Orders {
	return predicate.Orders(sql.FieldHasPrefix(FieldOrderSn, v))
}

// OrderSnHasSuffix applies the HasSuffix predicate on the "order_sn" field.
func OrderSnHasSuffix(v string) predicate.Orders {
	return predicate.Orders(sql.FieldHasSuffix(FieldOrderSn, v))
}

// OrderSnEqualFold applies the EqualFold predicate on the "order_sn" field.
func OrderSnEqualFold(v string) predicate.Orders {
	return predicate.Orders(sql.FieldEqualFold(FieldOrderSn, v))
}

// OrderSnContainsFold applies the ContainsFold predicate on the "order_sn" field.
func OrderSnContainsFold(v string) predicate.Orders {
	return predicate.Orders(sql.FieldContainsFold(FieldOrderSn, v))
}

// PayTypeEQ applies the EQ predicate on the "pay_type" field.
func PayTypeEQ(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldPayType, v))
}

// PayTypeNEQ applies the NEQ predicate on the "pay_type" field.
func PayTypeNEQ(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldNEQ(FieldPayType, v))
}

// PayTypeIn applies the In predicate on the "pay_type" field.
func PayTypeIn(vs ...int32) predicate.Orders {
	return predicate.Orders(sql.FieldIn(FieldPayType, vs...))
}

// PayTypeNotIn applies the NotIn predicate on the "pay_type" field.
func PayTypeNotIn(vs ...int32) predicate.Orders {
	return predicate.Orders(sql.FieldNotIn(FieldPayType, vs...))
}

// PayTypeGT applies the GT predicate on the "pay_type" field.
func PayTypeGT(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldGT(FieldPayType, v))
}

// PayTypeGTE applies the GTE predicate on the "pay_type" field.
func PayTypeGTE(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldGTE(FieldPayType, v))
}

// PayTypeLT applies the LT predicate on the "pay_type" field.
func PayTypeLT(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldLT(FieldPayType, v))
}

// PayTypeLTE applies the LTE predicate on the "pay_type" field.
func PayTypeLTE(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldLTE(FieldPayType, v))
}

// PayStatusEQ applies the EQ predicate on the "pay_status" field.
func PayStatusEQ(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldPayStatus, v))
}

// PayStatusNEQ applies the NEQ predicate on the "pay_status" field.
func PayStatusNEQ(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldNEQ(FieldPayStatus, v))
}

// PayStatusIn applies the In predicate on the "pay_status" field.
func PayStatusIn(vs ...int32) predicate.Orders {
	return predicate.Orders(sql.FieldIn(FieldPayStatus, vs...))
}

// PayStatusNotIn applies the NotIn predicate on the "pay_status" field.
func PayStatusNotIn(vs ...int32) predicate.Orders {
	return predicate.Orders(sql.FieldNotIn(FieldPayStatus, vs...))
}

// PayStatusGT applies the GT predicate on the "pay_status" field.
func PayStatusGT(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldGT(FieldPayStatus, v))
}

// PayStatusGTE applies the GTE predicate on the "pay_status" field.
func PayStatusGTE(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldGTE(FieldPayStatus, v))
}

// PayStatusLT applies the LT predicate on the "pay_status" field.
func PayStatusLT(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldLT(FieldPayStatus, v))
}

// PayStatusLTE applies the LTE predicate on the "pay_status" field.
func PayStatusLTE(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldLTE(FieldPayStatus, v))
}

// PayStatusIsNil applies the IsNil predicate on the "pay_status" field.
func PayStatusIsNil() predicate.Orders {
	return predicate.Orders(sql.FieldIsNull(FieldPayStatus))
}

// PayStatusNotNil applies the NotNil predicate on the "pay_status" field.
func PayStatusNotNil() predicate.Orders {
	return predicate.Orders(sql.FieldNotNull(FieldPayStatus))
}

// TradePriceEQ applies the EQ predicate on the "trade_price" field.
func TradePriceEQ(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldTradePrice, v))
}

// TradePriceNEQ applies the NEQ predicate on the "trade_price" field.
func TradePriceNEQ(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldNEQ(FieldTradePrice, v))
}

// TradePriceIn applies the In predicate on the "trade_price" field.
func TradePriceIn(vs ...int32) predicate.Orders {
	return predicate.Orders(sql.FieldIn(FieldTradePrice, vs...))
}

// TradePriceNotIn applies the NotIn predicate on the "trade_price" field.
func TradePriceNotIn(vs ...int32) predicate.Orders {
	return predicate.Orders(sql.FieldNotIn(FieldTradePrice, vs...))
}

// TradePriceGT applies the GT predicate on the "trade_price" field.
func TradePriceGT(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldGT(FieldTradePrice, v))
}

// TradePriceGTE applies the GTE predicate on the "trade_price" field.
func TradePriceGTE(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldGTE(FieldTradePrice, v))
}

// TradePriceLT applies the LT predicate on the "trade_price" field.
func TradePriceLT(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldLT(FieldTradePrice, v))
}

// TradePriceLTE applies the LTE predicate on the "trade_price" field.
func TradePriceLTE(v int32) predicate.Orders {
	return predicate.Orders(sql.FieldLTE(FieldTradePrice, v))
}

// TradeNoEQ applies the EQ predicate on the "trade_no" field.
func TradeNoEQ(v string) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldTradeNo, v))
}

// TradeNoNEQ applies the NEQ predicate on the "trade_no" field.
func TradeNoNEQ(v string) predicate.Orders {
	return predicate.Orders(sql.FieldNEQ(FieldTradeNo, v))
}

// TradeNoIn applies the In predicate on the "trade_no" field.
func TradeNoIn(vs ...string) predicate.Orders {
	return predicate.Orders(sql.FieldIn(FieldTradeNo, vs...))
}

// TradeNoNotIn applies the NotIn predicate on the "trade_no" field.
func TradeNoNotIn(vs ...string) predicate.Orders {
	return predicate.Orders(sql.FieldNotIn(FieldTradeNo, vs...))
}

// TradeNoGT applies the GT predicate on the "trade_no" field.
func TradeNoGT(v string) predicate.Orders {
	return predicate.Orders(sql.FieldGT(FieldTradeNo, v))
}

// TradeNoGTE applies the GTE predicate on the "trade_no" field.
func TradeNoGTE(v string) predicate.Orders {
	return predicate.Orders(sql.FieldGTE(FieldTradeNo, v))
}

// TradeNoLT applies the LT predicate on the "trade_no" field.
func TradeNoLT(v string) predicate.Orders {
	return predicate.Orders(sql.FieldLT(FieldTradeNo, v))
}

// TradeNoLTE applies the LTE predicate on the "trade_no" field.
func TradeNoLTE(v string) predicate.Orders {
	return predicate.Orders(sql.FieldLTE(FieldTradeNo, v))
}

// TradeNoContains applies the Contains predicate on the "trade_no" field.
func TradeNoContains(v string) predicate.Orders {
	return predicate.Orders(sql.FieldContains(FieldTradeNo, v))
}

// TradeNoHasPrefix applies the HasPrefix predicate on the "trade_no" field.
func TradeNoHasPrefix(v string) predicate.Orders {
	return predicate.Orders(sql.FieldHasPrefix(FieldTradeNo, v))
}

// TradeNoHasSuffix applies the HasSuffix predicate on the "trade_no" field.
func TradeNoHasSuffix(v string) predicate.Orders {
	return predicate.Orders(sql.FieldHasSuffix(FieldTradeNo, v))
}

// TradeNoIsNil applies the IsNil predicate on the "trade_no" field.
func TradeNoIsNil() predicate.Orders {
	return predicate.Orders(sql.FieldIsNull(FieldTradeNo))
}

// TradeNoNotNil applies the NotNil predicate on the "trade_no" field.
func TradeNoNotNil() predicate.Orders {
	return predicate.Orders(sql.FieldNotNull(FieldTradeNo))
}

// TradeNoEqualFold applies the EqualFold predicate on the "trade_no" field.
func TradeNoEqualFold(v string) predicate.Orders {
	return predicate.Orders(sql.FieldEqualFold(FieldTradeNo, v))
}

// TradeNoContainsFold applies the ContainsFold predicate on the "trade_no" field.
func TradeNoContainsFold(v string) predicate.Orders {
	return predicate.Orders(sql.FieldContainsFold(FieldTradeNo, v))
}

// PayTimeEQ applies the EQ predicate on the "pay_time" field.
func PayTimeEQ(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldPayTime, v))
}

// PayTimeNEQ applies the NEQ predicate on the "pay_time" field.
func PayTimeNEQ(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldNEQ(FieldPayTime, v))
}

// PayTimeIn applies the In predicate on the "pay_time" field.
func PayTimeIn(vs ...time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldIn(FieldPayTime, vs...))
}

// PayTimeNotIn applies the NotIn predicate on the "pay_time" field.
func PayTimeNotIn(vs ...time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldNotIn(FieldPayTime, vs...))
}

// PayTimeGT applies the GT predicate on the "pay_time" field.
func PayTimeGT(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldGT(FieldPayTime, v))
}

// PayTimeGTE applies the GTE predicate on the "pay_time" field.
func PayTimeGTE(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldGTE(FieldPayTime, v))
}

// PayTimeLT applies the LT predicate on the "pay_time" field.
func PayTimeLT(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldLT(FieldPayTime, v))
}

// PayTimeLTE applies the LTE predicate on the "pay_time" field.
func PayTimeLTE(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldLTE(FieldPayTime, v))
}

// PayTimeIsNil applies the IsNil predicate on the "pay_time" field.
func PayTimeIsNil() predicate.Orders {
	return predicate.Orders(sql.FieldIsNull(FieldPayTime))
}

// PayTimeNotNil applies the NotNil predicate on the "pay_time" field.
func PayTimeNotNil() predicate.Orders {
	return predicate.Orders(sql.FieldNotNull(FieldPayTime))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Orders {
	return predicate.Orders(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Orders) predicate.Orders {
	return predicate.Orders(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Orders) predicate.Orders {
	return predicate.Orders(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Orders) predicate.Orders {
	return predicate.Orders(func(s *sql.Selector) {
		p(s.Not())
	})
}
