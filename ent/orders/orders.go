// Code generated by ent, DO NOT EDIT.

package orders

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the orders type in the database.
	Label = "orders"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldOrderSn holds the string denoting the order_sn field in the database.
	FieldOrderSn = "order_sn"
	// FieldPayType holds the string denoting the pay_type field in the database.
	FieldPayType = "pay_type"
	// FieldPayStatus holds the string denoting the pay_status field in the database.
	FieldPayStatus = "pay_status"
	// FieldTradePrice holds the string denoting the trade_price field in the database.
	FieldTradePrice = "trade_price"
	// FieldTradeNo holds the string denoting the trade_no field in the database.
	FieldTradeNo = "trade_no"
	// FieldPayTime holds the string denoting the pay_time field in the database.
	FieldPayTime = "pay_time"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the orders in the database.
	Table = "orders"
)

// Columns holds all SQL columns for orders fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldOrderSn,
	FieldPayType,
	FieldPayStatus,
	FieldTradePrice,
	FieldTradeNo,
	FieldPayTime,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPayType holds the default value on creation for the "pay_type" field.
	DefaultPayType int32
	// DefaultPayStatus holds the default value on creation for the "pay_status" field.
	DefaultPayStatus int32
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the Orders queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByOrderSn orders the results by the order_sn field.
func ByOrderSn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderSn, opts...).ToFunc()
}

// ByPayType orders the results by the pay_type field.
func ByPayType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayType, opts...).ToFunc()
}

// ByPayStatus orders the results by the pay_status field.
func ByPayStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayStatus, opts...).ToFunc()
}

// ByTradePrice orders the results by the trade_price field.
func ByTradePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTradePrice, opts...).ToFunc()
}

// ByTradeNo orders the results by the trade_no field.
func ByTradeNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTradeNo, opts...).ToFunc()
}

// ByPayTime orders the results by the pay_time field.
func ByPayTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayTime, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
