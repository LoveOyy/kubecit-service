// Code generated by ent, DO NOT EDIT.

package wallet

import (
	"kubecit-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldID, id))
}

// GoldLeaf applies equality check predicate on the "gold_leaf" field. It's identical to GoldLeafEQ.
func GoldLeaf(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldGoldLeaf, v))
}

// SilverLeaf applies equality check predicate on the "silver_leaf" field. It's identical to SilverLeafEQ.
func SilverLeaf(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldSilverLeaf, v))
}

// FrozenGoldLeaf applies equality check predicate on the "frozen_gold_leaf" field. It's identical to FrozenGoldLeafEQ.
func FrozenGoldLeaf(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldFrozenGoldLeaf, v))
}

// FrozenSilverLeaf applies equality check predicate on the "frozen_silver_leaf" field. It's identical to FrozenSilverLeafEQ.
func FrozenSilverLeaf(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldFrozenSilverLeaf, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldUserID, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldUsername, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldUpdateAt, v))
}

// GoldLeafEQ applies the EQ predicate on the "gold_leaf" field.
func GoldLeafEQ(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldGoldLeaf, v))
}

// GoldLeafNEQ applies the NEQ predicate on the "gold_leaf" field.
func GoldLeafNEQ(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldGoldLeaf, v))
}

// GoldLeafIn applies the In predicate on the "gold_leaf" field.
func GoldLeafIn(vs ...int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldGoldLeaf, vs...))
}

// GoldLeafNotIn applies the NotIn predicate on the "gold_leaf" field.
func GoldLeafNotIn(vs ...int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldGoldLeaf, vs...))
}

// GoldLeafGT applies the GT predicate on the "gold_leaf" field.
func GoldLeafGT(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldGoldLeaf, v))
}

// GoldLeafGTE applies the GTE predicate on the "gold_leaf" field.
func GoldLeafGTE(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldGoldLeaf, v))
}

// GoldLeafLT applies the LT predicate on the "gold_leaf" field.
func GoldLeafLT(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldGoldLeaf, v))
}

// GoldLeafLTE applies the LTE predicate on the "gold_leaf" field.
func GoldLeafLTE(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldGoldLeaf, v))
}

// GoldLeafIsNil applies the IsNil predicate on the "gold_leaf" field.
func GoldLeafIsNil() predicate.Wallet {
	return predicate.Wallet(sql.FieldIsNull(FieldGoldLeaf))
}

// GoldLeafNotNil applies the NotNil predicate on the "gold_leaf" field.
func GoldLeafNotNil() predicate.Wallet {
	return predicate.Wallet(sql.FieldNotNull(FieldGoldLeaf))
}

// SilverLeafEQ applies the EQ predicate on the "silver_leaf" field.
func SilverLeafEQ(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldSilverLeaf, v))
}

// SilverLeafNEQ applies the NEQ predicate on the "silver_leaf" field.
func SilverLeafNEQ(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldSilverLeaf, v))
}

// SilverLeafIn applies the In predicate on the "silver_leaf" field.
func SilverLeafIn(vs ...int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldSilverLeaf, vs...))
}

// SilverLeafNotIn applies the NotIn predicate on the "silver_leaf" field.
func SilverLeafNotIn(vs ...int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldSilverLeaf, vs...))
}

// SilverLeafGT applies the GT predicate on the "silver_leaf" field.
func SilverLeafGT(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldSilverLeaf, v))
}

// SilverLeafGTE applies the GTE predicate on the "silver_leaf" field.
func SilverLeafGTE(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldSilverLeaf, v))
}

// SilverLeafLT applies the LT predicate on the "silver_leaf" field.
func SilverLeafLT(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldSilverLeaf, v))
}

// SilverLeafLTE applies the LTE predicate on the "silver_leaf" field.
func SilverLeafLTE(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldSilverLeaf, v))
}

// SilverLeafIsNil applies the IsNil predicate on the "silver_leaf" field.
func SilverLeafIsNil() predicate.Wallet {
	return predicate.Wallet(sql.FieldIsNull(FieldSilverLeaf))
}

// SilverLeafNotNil applies the NotNil predicate on the "silver_leaf" field.
func SilverLeafNotNil() predicate.Wallet {
	return predicate.Wallet(sql.FieldNotNull(FieldSilverLeaf))
}

// FrozenGoldLeafEQ applies the EQ predicate on the "frozen_gold_leaf" field.
func FrozenGoldLeafEQ(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldFrozenGoldLeaf, v))
}

// FrozenGoldLeafNEQ applies the NEQ predicate on the "frozen_gold_leaf" field.
func FrozenGoldLeafNEQ(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldFrozenGoldLeaf, v))
}

// FrozenGoldLeafIn applies the In predicate on the "frozen_gold_leaf" field.
func FrozenGoldLeafIn(vs ...int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldFrozenGoldLeaf, vs...))
}

// FrozenGoldLeafNotIn applies the NotIn predicate on the "frozen_gold_leaf" field.
func FrozenGoldLeafNotIn(vs ...int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldFrozenGoldLeaf, vs...))
}

// FrozenGoldLeafGT applies the GT predicate on the "frozen_gold_leaf" field.
func FrozenGoldLeafGT(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldFrozenGoldLeaf, v))
}

// FrozenGoldLeafGTE applies the GTE predicate on the "frozen_gold_leaf" field.
func FrozenGoldLeafGTE(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldFrozenGoldLeaf, v))
}

// FrozenGoldLeafLT applies the LT predicate on the "frozen_gold_leaf" field.
func FrozenGoldLeafLT(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldFrozenGoldLeaf, v))
}

// FrozenGoldLeafLTE applies the LTE predicate on the "frozen_gold_leaf" field.
func FrozenGoldLeafLTE(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldFrozenGoldLeaf, v))
}

// FrozenGoldLeafIsNil applies the IsNil predicate on the "frozen_gold_leaf" field.
func FrozenGoldLeafIsNil() predicate.Wallet {
	return predicate.Wallet(sql.FieldIsNull(FieldFrozenGoldLeaf))
}

// FrozenGoldLeafNotNil applies the NotNil predicate on the "frozen_gold_leaf" field.
func FrozenGoldLeafNotNil() predicate.Wallet {
	return predicate.Wallet(sql.FieldNotNull(FieldFrozenGoldLeaf))
}

// FrozenSilverLeafEQ applies the EQ predicate on the "frozen_silver_leaf" field.
func FrozenSilverLeafEQ(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldFrozenSilverLeaf, v))
}

// FrozenSilverLeafNEQ applies the NEQ predicate on the "frozen_silver_leaf" field.
func FrozenSilverLeafNEQ(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldFrozenSilverLeaf, v))
}

// FrozenSilverLeafIn applies the In predicate on the "frozen_silver_leaf" field.
func FrozenSilverLeafIn(vs ...int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldFrozenSilverLeaf, vs...))
}

// FrozenSilverLeafNotIn applies the NotIn predicate on the "frozen_silver_leaf" field.
func FrozenSilverLeafNotIn(vs ...int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldFrozenSilverLeaf, vs...))
}

// FrozenSilverLeafGT applies the GT predicate on the "frozen_silver_leaf" field.
func FrozenSilverLeafGT(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldFrozenSilverLeaf, v))
}

// FrozenSilverLeafGTE applies the GTE predicate on the "frozen_silver_leaf" field.
func FrozenSilverLeafGTE(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldFrozenSilverLeaf, v))
}

// FrozenSilverLeafLT applies the LT predicate on the "frozen_silver_leaf" field.
func FrozenSilverLeafLT(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldFrozenSilverLeaf, v))
}

// FrozenSilverLeafLTE applies the LTE predicate on the "frozen_silver_leaf" field.
func FrozenSilverLeafLTE(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldFrozenSilverLeaf, v))
}

// FrozenSilverLeafIsNil applies the IsNil predicate on the "frozen_silver_leaf" field.
func FrozenSilverLeafIsNil() predicate.Wallet {
	return predicate.Wallet(sql.FieldIsNull(FieldFrozenSilverLeaf))
}

// FrozenSilverLeafNotNil applies the NotNil predicate on the "frozen_silver_leaf" field.
func FrozenSilverLeafNotNil() predicate.Wallet {
	return predicate.Wallet(sql.FieldNotNull(FieldFrozenSilverLeaf))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int32) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Wallet {
	return predicate.Wallet(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Wallet {
	return predicate.Wallet(sql.FieldNotNull(FieldUserID))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.Wallet {
	return predicate.Wallet(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.Wallet {
	return predicate.Wallet(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldContainsFold(FieldUsername, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldCreateAt, v))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldUpdateAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Wallet) predicate.Wallet {
	return predicate.Wallet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Wallet) predicate.Wallet {
	return predicate.Wallet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Wallet) predicate.Wallet {
	return predicate.Wallet(func(s *sql.Selector) {
		p(s.Not())
	})
}
