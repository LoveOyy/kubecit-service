// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/chapter"
	"kubecit-service/ent/course"
	"kubecit-service/ent/lesson"
	"kubecit-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChapterUpdate is the builder for updating Chapter entities.
type ChapterUpdate struct {
	config
	hooks    []Hook
	mutation *ChapterMutation
}

// Where appends a list predicates to the ChapterUpdate builder.
func (cu *ChapterUpdate) Where(ps ...predicate.Chapter) *ChapterUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *ChapterUpdate) SetName(s string) *ChapterUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetReleasedTime sets the "released_time" field.
func (cu *ChapterUpdate) SetReleasedTime(t time.Time) *ChapterUpdate {
	cu.mutation.SetReleasedTime(t)
	return cu
}

// SetDescription sets the "description" field.
func (cu *ChapterUpdate) SetDescription(s string) *ChapterUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetSort sets the "sort" field.
func (cu *ChapterUpdate) SetSort(i int) *ChapterUpdate {
	cu.mutation.ResetSort()
	cu.mutation.SetSort(i)
	return cu
}

// AddSort adds i to the "sort" field.
func (cu *ChapterUpdate) AddSort(i int) *ChapterUpdate {
	cu.mutation.AddSort(i)
	return cu
}

// SetHasFreePreview sets the "has_free_preview" field.
func (cu *ChapterUpdate) SetHasFreePreview(i int) *ChapterUpdate {
	cu.mutation.ResetHasFreePreview()
	cu.mutation.SetHasFreePreview(i)
	return cu
}

// SetNillableHasFreePreview sets the "has_free_preview" field if the given value is not nil.
func (cu *ChapterUpdate) SetNillableHasFreePreview(i *int) *ChapterUpdate {
	if i != nil {
		cu.SetHasFreePreview(*i)
	}
	return cu
}

// AddHasFreePreview adds i to the "has_free_preview" field.
func (cu *ChapterUpdate) AddHasFreePreview(i int) *ChapterUpdate {
	cu.mutation.AddHasFreePreview(i)
	return cu
}

// SetCourseID sets the "course_id" field.
func (cu *ChapterUpdate) SetCourseID(i int) *ChapterUpdate {
	cu.mutation.SetCourseID(i)
	return cu
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (cu *ChapterUpdate) SetNillableCourseID(i *int) *ChapterUpdate {
	if i != nil {
		cu.SetCourseID(*i)
	}
	return cu
}

// ClearCourseID clears the value of the "course_id" field.
func (cu *ChapterUpdate) ClearCourseID() *ChapterUpdate {
	cu.mutation.ClearCourseID()
	return cu
}

// AddLessonIDs adds the "lessons" edge to the Lesson entity by IDs.
func (cu *ChapterUpdate) AddLessonIDs(ids ...int) *ChapterUpdate {
	cu.mutation.AddLessonIDs(ids...)
	return cu
}

// AddLessons adds the "lessons" edges to the Lesson entity.
func (cu *ChapterUpdate) AddLessons(l ...*Lesson) *ChapterUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cu.AddLessonIDs(ids...)
}

// SetCourse sets the "course" edge to the Course entity.
func (cu *ChapterUpdate) SetCourse(c *Course) *ChapterUpdate {
	return cu.SetCourseID(c.ID)
}

// Mutation returns the ChapterMutation object of the builder.
func (cu *ChapterUpdate) Mutation() *ChapterMutation {
	return cu.mutation
}

// ClearLessons clears all "lessons" edges to the Lesson entity.
func (cu *ChapterUpdate) ClearLessons() *ChapterUpdate {
	cu.mutation.ClearLessons()
	return cu
}

// RemoveLessonIDs removes the "lessons" edge to Lesson entities by IDs.
func (cu *ChapterUpdate) RemoveLessonIDs(ids ...int) *ChapterUpdate {
	cu.mutation.RemoveLessonIDs(ids...)
	return cu
}

// RemoveLessons removes "lessons" edges to Lesson entities.
func (cu *ChapterUpdate) RemoveLessons(l ...*Lesson) *ChapterUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cu.RemoveLessonIDs(ids...)
}

// ClearCourse clears the "course" edge to the Course entity.
func (cu *ChapterUpdate) ClearCourse() *ChapterUpdate {
	cu.mutation.ClearCourse()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChapterUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChapterUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChapterUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChapterUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ChapterUpdate) defaults() {
	if _, ok := cu.mutation.ReleasedTime(); !ok {
		v := chapter.UpdateDefaultReleasedTime()
		cu.mutation.SetReleasedTime(v)
	}
}

func (cu *ChapterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(chapter.Table, chapter.Columns, sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(chapter.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.ReleasedTime(); ok {
		_spec.SetField(chapter.FieldReleasedTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(chapter.FieldDescription, field.TypeString, value)
	}
	if value, ok := cu.mutation.Sort(); ok {
		_spec.SetField(chapter.FieldSort, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedSort(); ok {
		_spec.AddField(chapter.FieldSort, field.TypeInt, value)
	}
	if value, ok := cu.mutation.HasFreePreview(); ok {
		_spec.SetField(chapter.FieldHasFreePreview, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedHasFreePreview(); ok {
		_spec.AddField(chapter.FieldHasFreePreview, field.TypeInt, value)
	}
	if cu.mutation.LessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chapter.LessonsTable,
			Columns: []string{chapter.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedLessonsIDs(); len(nodes) > 0 && !cu.mutation.LessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chapter.LessonsTable,
			Columns: []string{chapter.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LessonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chapter.LessonsTable,
			Columns: []string{chapter.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chapter.CourseTable,
			Columns: []string{chapter.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chapter.CourseTable,
			Columns: []string{chapter.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chapter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChapterUpdateOne is the builder for updating a single Chapter entity.
type ChapterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChapterMutation
}

// SetName sets the "name" field.
func (cuo *ChapterUpdateOne) SetName(s string) *ChapterUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetReleasedTime sets the "released_time" field.
func (cuo *ChapterUpdateOne) SetReleasedTime(t time.Time) *ChapterUpdateOne {
	cuo.mutation.SetReleasedTime(t)
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *ChapterUpdateOne) SetDescription(s string) *ChapterUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetSort sets the "sort" field.
func (cuo *ChapterUpdateOne) SetSort(i int) *ChapterUpdateOne {
	cuo.mutation.ResetSort()
	cuo.mutation.SetSort(i)
	return cuo
}

// AddSort adds i to the "sort" field.
func (cuo *ChapterUpdateOne) AddSort(i int) *ChapterUpdateOne {
	cuo.mutation.AddSort(i)
	return cuo
}

// SetHasFreePreview sets the "has_free_preview" field.
func (cuo *ChapterUpdateOne) SetHasFreePreview(i int) *ChapterUpdateOne {
	cuo.mutation.ResetHasFreePreview()
	cuo.mutation.SetHasFreePreview(i)
	return cuo
}

// SetNillableHasFreePreview sets the "has_free_preview" field if the given value is not nil.
func (cuo *ChapterUpdateOne) SetNillableHasFreePreview(i *int) *ChapterUpdateOne {
	if i != nil {
		cuo.SetHasFreePreview(*i)
	}
	return cuo
}

// AddHasFreePreview adds i to the "has_free_preview" field.
func (cuo *ChapterUpdateOne) AddHasFreePreview(i int) *ChapterUpdateOne {
	cuo.mutation.AddHasFreePreview(i)
	return cuo
}

// SetCourseID sets the "course_id" field.
func (cuo *ChapterUpdateOne) SetCourseID(i int) *ChapterUpdateOne {
	cuo.mutation.SetCourseID(i)
	return cuo
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (cuo *ChapterUpdateOne) SetNillableCourseID(i *int) *ChapterUpdateOne {
	if i != nil {
		cuo.SetCourseID(*i)
	}
	return cuo
}

// ClearCourseID clears the value of the "course_id" field.
func (cuo *ChapterUpdateOne) ClearCourseID() *ChapterUpdateOne {
	cuo.mutation.ClearCourseID()
	return cuo
}

// AddLessonIDs adds the "lessons" edge to the Lesson entity by IDs.
func (cuo *ChapterUpdateOne) AddLessonIDs(ids ...int) *ChapterUpdateOne {
	cuo.mutation.AddLessonIDs(ids...)
	return cuo
}

// AddLessons adds the "lessons" edges to the Lesson entity.
func (cuo *ChapterUpdateOne) AddLessons(l ...*Lesson) *ChapterUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuo.AddLessonIDs(ids...)
}

// SetCourse sets the "course" edge to the Course entity.
func (cuo *ChapterUpdateOne) SetCourse(c *Course) *ChapterUpdateOne {
	return cuo.SetCourseID(c.ID)
}

// Mutation returns the ChapterMutation object of the builder.
func (cuo *ChapterUpdateOne) Mutation() *ChapterMutation {
	return cuo.mutation
}

// ClearLessons clears all "lessons" edges to the Lesson entity.
func (cuo *ChapterUpdateOne) ClearLessons() *ChapterUpdateOne {
	cuo.mutation.ClearLessons()
	return cuo
}

// RemoveLessonIDs removes the "lessons" edge to Lesson entities by IDs.
func (cuo *ChapterUpdateOne) RemoveLessonIDs(ids ...int) *ChapterUpdateOne {
	cuo.mutation.RemoveLessonIDs(ids...)
	return cuo
}

// RemoveLessons removes "lessons" edges to Lesson entities.
func (cuo *ChapterUpdateOne) RemoveLessons(l ...*Lesson) *ChapterUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuo.RemoveLessonIDs(ids...)
}

// ClearCourse clears the "course" edge to the Course entity.
func (cuo *ChapterUpdateOne) ClearCourse() *ChapterUpdateOne {
	cuo.mutation.ClearCourse()
	return cuo
}

// Where appends a list predicates to the ChapterUpdate builder.
func (cuo *ChapterUpdateOne) Where(ps ...predicate.Chapter) *ChapterUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChapterUpdateOne) Select(field string, fields ...string) *ChapterUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Chapter entity.
func (cuo *ChapterUpdateOne) Save(ctx context.Context) (*Chapter, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChapterUpdateOne) SaveX(ctx context.Context) *Chapter {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChapterUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChapterUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ChapterUpdateOne) defaults() {
	if _, ok := cuo.mutation.ReleasedTime(); !ok {
		v := chapter.UpdateDefaultReleasedTime()
		cuo.mutation.SetReleasedTime(v)
	}
}

func (cuo *ChapterUpdateOne) sqlSave(ctx context.Context) (_node *Chapter, err error) {
	_spec := sqlgraph.NewUpdateSpec(chapter.Table, chapter.Columns, sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Chapter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chapter.FieldID)
		for _, f := range fields {
			if !chapter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chapter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(chapter.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ReleasedTime(); ok {
		_spec.SetField(chapter.FieldReleasedTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(chapter.FieldDescription, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Sort(); ok {
		_spec.SetField(chapter.FieldSort, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedSort(); ok {
		_spec.AddField(chapter.FieldSort, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.HasFreePreview(); ok {
		_spec.SetField(chapter.FieldHasFreePreview, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedHasFreePreview(); ok {
		_spec.AddField(chapter.FieldHasFreePreview, field.TypeInt, value)
	}
	if cuo.mutation.LessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chapter.LessonsTable,
			Columns: []string{chapter.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedLessonsIDs(); len(nodes) > 0 && !cuo.mutation.LessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chapter.LessonsTable,
			Columns: []string{chapter.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LessonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chapter.LessonsTable,
			Columns: []string{chapter.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chapter.CourseTable,
			Columns: []string{chapter.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chapter.CourseTable,
			Columns: []string{chapter.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Chapter{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chapter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
