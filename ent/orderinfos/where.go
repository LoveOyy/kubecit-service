// Code generated by ent, DO NOT EDIT.

package orderinfos

import (
	"kubecit-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLTE(FieldID, id))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldOrderID, v))
}

// CourseID applies equality check predicate on the "course_id" field. It's identical to CourseIDEQ.
func CourseID(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldCourseID, v))
}

// CourseName applies equality check predicate on the "course_name" field. It's identical to CourseNameEQ.
func CourseName(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldCourseName, v))
}

// CoursePrice applies equality check predicate on the "course_price" field. It's identical to CoursePriceEQ.
func CoursePrice(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldCoursePrice, v))
}

// CourseDescribe applies equality check predicate on the "course_describe" field. It's identical to CourseDescribeEQ.
func CourseDescribe(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldCourseDescribe, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldUpdateTime, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGT(FieldOrderID, v))
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGTE(FieldOrderID, v))
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLT(FieldOrderID, v))
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLTE(FieldOrderID, v))
}

// CourseIDEQ applies the EQ predicate on the "course_id" field.
func CourseIDEQ(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldCourseID, v))
}

// CourseIDNEQ applies the NEQ predicate on the "course_id" field.
func CourseIDNEQ(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNEQ(FieldCourseID, v))
}

// CourseIDIn applies the In predicate on the "course_id" field.
func CourseIDIn(vs ...int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldIn(FieldCourseID, vs...))
}

// CourseIDNotIn applies the NotIn predicate on the "course_id" field.
func CourseIDNotIn(vs ...int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNotIn(FieldCourseID, vs...))
}

// CourseIDGT applies the GT predicate on the "course_id" field.
func CourseIDGT(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGT(FieldCourseID, v))
}

// CourseIDGTE applies the GTE predicate on the "course_id" field.
func CourseIDGTE(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGTE(FieldCourseID, v))
}

// CourseIDLT applies the LT predicate on the "course_id" field.
func CourseIDLT(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLT(FieldCourseID, v))
}

// CourseIDLTE applies the LTE predicate on the "course_id" field.
func CourseIDLTE(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLTE(FieldCourseID, v))
}

// CourseNameEQ applies the EQ predicate on the "course_name" field.
func CourseNameEQ(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldCourseName, v))
}

// CourseNameNEQ applies the NEQ predicate on the "course_name" field.
func CourseNameNEQ(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNEQ(FieldCourseName, v))
}

// CourseNameIn applies the In predicate on the "course_name" field.
func CourseNameIn(vs ...string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldIn(FieldCourseName, vs...))
}

// CourseNameNotIn applies the NotIn predicate on the "course_name" field.
func CourseNameNotIn(vs ...string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNotIn(FieldCourseName, vs...))
}

// CourseNameGT applies the GT predicate on the "course_name" field.
func CourseNameGT(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGT(FieldCourseName, v))
}

// CourseNameGTE applies the GTE predicate on the "course_name" field.
func CourseNameGTE(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGTE(FieldCourseName, v))
}

// CourseNameLT applies the LT predicate on the "course_name" field.
func CourseNameLT(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLT(FieldCourseName, v))
}

// CourseNameLTE applies the LTE predicate on the "course_name" field.
func CourseNameLTE(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLTE(FieldCourseName, v))
}

// CourseNameContains applies the Contains predicate on the "course_name" field.
func CourseNameContains(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldContains(FieldCourseName, v))
}

// CourseNameHasPrefix applies the HasPrefix predicate on the "course_name" field.
func CourseNameHasPrefix(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldHasPrefix(FieldCourseName, v))
}

// CourseNameHasSuffix applies the HasSuffix predicate on the "course_name" field.
func CourseNameHasSuffix(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldHasSuffix(FieldCourseName, v))
}

// CourseNameEqualFold applies the EqualFold predicate on the "course_name" field.
func CourseNameEqualFold(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEqualFold(FieldCourseName, v))
}

// CourseNameContainsFold applies the ContainsFold predicate on the "course_name" field.
func CourseNameContainsFold(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldContainsFold(FieldCourseName, v))
}

// CoursePriceEQ applies the EQ predicate on the "course_price" field.
func CoursePriceEQ(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldCoursePrice, v))
}

// CoursePriceNEQ applies the NEQ predicate on the "course_price" field.
func CoursePriceNEQ(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNEQ(FieldCoursePrice, v))
}

// CoursePriceIn applies the In predicate on the "course_price" field.
func CoursePriceIn(vs ...int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldIn(FieldCoursePrice, vs...))
}

// CoursePriceNotIn applies the NotIn predicate on the "course_price" field.
func CoursePriceNotIn(vs ...int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNotIn(FieldCoursePrice, vs...))
}

// CoursePriceGT applies the GT predicate on the "course_price" field.
func CoursePriceGT(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGT(FieldCoursePrice, v))
}

// CoursePriceGTE applies the GTE predicate on the "course_price" field.
func CoursePriceGTE(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGTE(FieldCoursePrice, v))
}

// CoursePriceLT applies the LT predicate on the "course_price" field.
func CoursePriceLT(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLT(FieldCoursePrice, v))
}

// CoursePriceLTE applies the LTE predicate on the "course_price" field.
func CoursePriceLTE(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLTE(FieldCoursePrice, v))
}

// CourseDescribeEQ applies the EQ predicate on the "course_describe" field.
func CourseDescribeEQ(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldCourseDescribe, v))
}

// CourseDescribeNEQ applies the NEQ predicate on the "course_describe" field.
func CourseDescribeNEQ(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNEQ(FieldCourseDescribe, v))
}

// CourseDescribeIn applies the In predicate on the "course_describe" field.
func CourseDescribeIn(vs ...string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldIn(FieldCourseDescribe, vs...))
}

// CourseDescribeNotIn applies the NotIn predicate on the "course_describe" field.
func CourseDescribeNotIn(vs ...string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNotIn(FieldCourseDescribe, vs...))
}

// CourseDescribeGT applies the GT predicate on the "course_describe" field.
func CourseDescribeGT(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGT(FieldCourseDescribe, v))
}

// CourseDescribeGTE applies the GTE predicate on the "course_describe" field.
func CourseDescribeGTE(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGTE(FieldCourseDescribe, v))
}

// CourseDescribeLT applies the LT predicate on the "course_describe" field.
func CourseDescribeLT(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLT(FieldCourseDescribe, v))
}

// CourseDescribeLTE applies the LTE predicate on the "course_describe" field.
func CourseDescribeLTE(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLTE(FieldCourseDescribe, v))
}

// CourseDescribeContains applies the Contains predicate on the "course_describe" field.
func CourseDescribeContains(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldContains(FieldCourseDescribe, v))
}

// CourseDescribeHasPrefix applies the HasPrefix predicate on the "course_describe" field.
func CourseDescribeHasPrefix(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldHasPrefix(FieldCourseDescribe, v))
}

// CourseDescribeHasSuffix applies the HasSuffix predicate on the "course_describe" field.
func CourseDescribeHasSuffix(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldHasSuffix(FieldCourseDescribe, v))
}

// CourseDescribeEqualFold applies the EqualFold predicate on the "course_describe" field.
func CourseDescribeEqualFold(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEqualFold(FieldCourseDescribe, v))
}

// CourseDescribeContainsFold applies the ContainsFold predicate on the "course_describe" field.
func CourseDescribeContainsFold(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldContainsFold(FieldCourseDescribe, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderInfos) predicate.OrderInfos {
	return predicate.OrderInfos(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderInfos) predicate.OrderInfos {
	return predicate.OrderInfos(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderInfos) predicate.OrderInfos {
	return predicate.OrderInfos(func(s *sql.Selector) {
		p(s.Not())
	})
}
