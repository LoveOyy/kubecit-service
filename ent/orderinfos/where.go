// Code generated by ent, DO NOT EDIT.

package orderinfos

import (
	"kubecit-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLTE(FieldID, id))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldOrderID, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldProductID, v))
}

// ProductName applies equality check predicate on the "product_name" field. It's identical to ProductNameEQ.
func ProductName(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldProductName, v))
}

// ProductPrice applies equality check predicate on the "product_price" field. It's identical to ProductPriceEQ.
func ProductPrice(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldProductPrice, v))
}

// ProductDescribe applies equality check predicate on the "product_describe" field. It's identical to ProductDescribeEQ.
func ProductDescribe(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldProductDescribe, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldUpdateTime, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGT(FieldOrderID, v))
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGTE(FieldOrderID, v))
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLT(FieldOrderID, v))
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLTE(FieldOrderID, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLTE(FieldProductID, v))
}

// ProductNameEQ applies the EQ predicate on the "product_name" field.
func ProductNameEQ(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldProductName, v))
}

// ProductNameNEQ applies the NEQ predicate on the "product_name" field.
func ProductNameNEQ(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNEQ(FieldProductName, v))
}

// ProductNameIn applies the In predicate on the "product_name" field.
func ProductNameIn(vs ...string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldIn(FieldProductName, vs...))
}

// ProductNameNotIn applies the NotIn predicate on the "product_name" field.
func ProductNameNotIn(vs ...string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNotIn(FieldProductName, vs...))
}

// ProductNameGT applies the GT predicate on the "product_name" field.
func ProductNameGT(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGT(FieldProductName, v))
}

// ProductNameGTE applies the GTE predicate on the "product_name" field.
func ProductNameGTE(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGTE(FieldProductName, v))
}

// ProductNameLT applies the LT predicate on the "product_name" field.
func ProductNameLT(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLT(FieldProductName, v))
}

// ProductNameLTE applies the LTE predicate on the "product_name" field.
func ProductNameLTE(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLTE(FieldProductName, v))
}

// ProductNameContains applies the Contains predicate on the "product_name" field.
func ProductNameContains(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldContains(FieldProductName, v))
}

// ProductNameHasPrefix applies the HasPrefix predicate on the "product_name" field.
func ProductNameHasPrefix(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldHasPrefix(FieldProductName, v))
}

// ProductNameHasSuffix applies the HasSuffix predicate on the "product_name" field.
func ProductNameHasSuffix(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldHasSuffix(FieldProductName, v))
}

// ProductNameEqualFold applies the EqualFold predicate on the "product_name" field.
func ProductNameEqualFold(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEqualFold(FieldProductName, v))
}

// ProductNameContainsFold applies the ContainsFold predicate on the "product_name" field.
func ProductNameContainsFold(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldContainsFold(FieldProductName, v))
}

// ProductPriceEQ applies the EQ predicate on the "product_price" field.
func ProductPriceEQ(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldProductPrice, v))
}

// ProductPriceNEQ applies the NEQ predicate on the "product_price" field.
func ProductPriceNEQ(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNEQ(FieldProductPrice, v))
}

// ProductPriceIn applies the In predicate on the "product_price" field.
func ProductPriceIn(vs ...int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldIn(FieldProductPrice, vs...))
}

// ProductPriceNotIn applies the NotIn predicate on the "product_price" field.
func ProductPriceNotIn(vs ...int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNotIn(FieldProductPrice, vs...))
}

// ProductPriceGT applies the GT predicate on the "product_price" field.
func ProductPriceGT(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGT(FieldProductPrice, v))
}

// ProductPriceGTE applies the GTE predicate on the "product_price" field.
func ProductPriceGTE(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGTE(FieldProductPrice, v))
}

// ProductPriceLT applies the LT predicate on the "product_price" field.
func ProductPriceLT(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLT(FieldProductPrice, v))
}

// ProductPriceLTE applies the LTE predicate on the "product_price" field.
func ProductPriceLTE(v int32) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLTE(FieldProductPrice, v))
}

// ProductDescribeEQ applies the EQ predicate on the "product_describe" field.
func ProductDescribeEQ(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldProductDescribe, v))
}

// ProductDescribeNEQ applies the NEQ predicate on the "product_describe" field.
func ProductDescribeNEQ(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNEQ(FieldProductDescribe, v))
}

// ProductDescribeIn applies the In predicate on the "product_describe" field.
func ProductDescribeIn(vs ...string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldIn(FieldProductDescribe, vs...))
}

// ProductDescribeNotIn applies the NotIn predicate on the "product_describe" field.
func ProductDescribeNotIn(vs ...string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNotIn(FieldProductDescribe, vs...))
}

// ProductDescribeGT applies the GT predicate on the "product_describe" field.
func ProductDescribeGT(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGT(FieldProductDescribe, v))
}

// ProductDescribeGTE applies the GTE predicate on the "product_describe" field.
func ProductDescribeGTE(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGTE(FieldProductDescribe, v))
}

// ProductDescribeLT applies the LT predicate on the "product_describe" field.
func ProductDescribeLT(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLT(FieldProductDescribe, v))
}

// ProductDescribeLTE applies the LTE predicate on the "product_describe" field.
func ProductDescribeLTE(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLTE(FieldProductDescribe, v))
}

// ProductDescribeContains applies the Contains predicate on the "product_describe" field.
func ProductDescribeContains(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldContains(FieldProductDescribe, v))
}

// ProductDescribeHasPrefix applies the HasPrefix predicate on the "product_describe" field.
func ProductDescribeHasPrefix(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldHasPrefix(FieldProductDescribe, v))
}

// ProductDescribeHasSuffix applies the HasSuffix predicate on the "product_describe" field.
func ProductDescribeHasSuffix(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldHasSuffix(FieldProductDescribe, v))
}

// ProductDescribeEqualFold applies the EqualFold predicate on the "product_describe" field.
func ProductDescribeEqualFold(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEqualFold(FieldProductDescribe, v))
}

// ProductDescribeContainsFold applies the ContainsFold predicate on the "product_describe" field.
func ProductDescribeContainsFold(v string) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldContainsFold(FieldProductDescribe, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OrderInfos {
	return predicate.OrderInfos(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderInfos) predicate.OrderInfos {
	return predicate.OrderInfos(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderInfos) predicate.OrderInfos {
	return predicate.OrderInfos(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderInfos) predicate.OrderInfos {
	return predicate.OrderInfos(func(s *sql.Selector) {
		p(s.Not())
	})
}
