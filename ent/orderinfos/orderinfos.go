// Code generated by ent, DO NOT EDIT.

package orderinfos

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the orderinfos type in the database.
	Label = "order_infos"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldCourseID holds the string denoting the course_id field in the database.
	FieldCourseID = "course_id"
	// FieldCourseName holds the string denoting the course_name field in the database.
	FieldCourseName = "course_name"
	// FieldCoursePrice holds the string denoting the course_price field in the database.
	FieldCoursePrice = "course_price"
	// FieldCourseDescribe holds the string denoting the course_describe field in the database.
	FieldCourseDescribe = "course_describe"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the orderinfos in the database.
	Table = "order_infos"
)

// Columns holds all SQL columns for orderinfos fields.
var Columns = []string{
	FieldID,
	FieldOrderID,
	FieldCourseID,
	FieldCourseName,
	FieldCoursePrice,
	FieldCourseDescribe,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the OrderInfos queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByCourseID orders the results by the course_id field.
func ByCourseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCourseID, opts...).ToFunc()
}

// ByCourseName orders the results by the course_name field.
func ByCourseName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCourseName, opts...).ToFunc()
}

// ByCoursePrice orders the results by the course_price field.
func ByCoursePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoursePrice, opts...).ToFunc()
}

// ByCourseDescribe orders the results by the course_describe field.
func ByCourseDescribe(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCourseDescribe, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
