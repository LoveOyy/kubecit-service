// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/orderinfos"
	"kubecit-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderInfosUpdate is the builder for updating OrderInfos entities.
type OrderInfosUpdate struct {
	config
	hooks    []Hook
	mutation *OrderInfosMutation
}

// Where appends a list predicates to the OrderInfosUpdate builder.
func (oiu *OrderInfosUpdate) Where(ps ...predicate.OrderInfos) *OrderInfosUpdate {
	oiu.mutation.Where(ps...)
	return oiu
}

// SetOrderID sets the "order_id" field.
func (oiu *OrderInfosUpdate) SetOrderID(i int32) *OrderInfosUpdate {
	oiu.mutation.ResetOrderID()
	oiu.mutation.SetOrderID(i)
	return oiu
}

// AddOrderID adds i to the "order_id" field.
func (oiu *OrderInfosUpdate) AddOrderID(i int32) *OrderInfosUpdate {
	oiu.mutation.AddOrderID(i)
	return oiu
}

// SetCourseID sets the "course_id" field.
func (oiu *OrderInfosUpdate) SetCourseID(i int32) *OrderInfosUpdate {
	oiu.mutation.ResetCourseID()
	oiu.mutation.SetCourseID(i)
	return oiu
}

// AddCourseID adds i to the "course_id" field.
func (oiu *OrderInfosUpdate) AddCourseID(i int32) *OrderInfosUpdate {
	oiu.mutation.AddCourseID(i)
	return oiu
}

// SetCourseName sets the "course_name" field.
func (oiu *OrderInfosUpdate) SetCourseName(s string) *OrderInfosUpdate {
	oiu.mutation.SetCourseName(s)
	return oiu
}

// SetCoursePrice sets the "course_price" field.
func (oiu *OrderInfosUpdate) SetCoursePrice(i int32) *OrderInfosUpdate {
	oiu.mutation.ResetCoursePrice()
	oiu.mutation.SetCoursePrice(i)
	return oiu
}

// AddCoursePrice adds i to the "course_price" field.
func (oiu *OrderInfosUpdate) AddCoursePrice(i int32) *OrderInfosUpdate {
	oiu.mutation.AddCoursePrice(i)
	return oiu
}

// SetCourseDescribe sets the "course_describe" field.
func (oiu *OrderInfosUpdate) SetCourseDescribe(s string) *OrderInfosUpdate {
	oiu.mutation.SetCourseDescribe(s)
	return oiu
}

// SetCreateTime sets the "create_time" field.
func (oiu *OrderInfosUpdate) SetCreateTime(t time.Time) *OrderInfosUpdate {
	oiu.mutation.SetCreateTime(t)
	return oiu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (oiu *OrderInfosUpdate) SetNillableCreateTime(t *time.Time) *OrderInfosUpdate {
	if t != nil {
		oiu.SetCreateTime(*t)
	}
	return oiu
}

// SetUpdateTime sets the "update_time" field.
func (oiu *OrderInfosUpdate) SetUpdateTime(t time.Time) *OrderInfosUpdate {
	oiu.mutation.SetUpdateTime(t)
	return oiu
}

// Mutation returns the OrderInfosMutation object of the builder.
func (oiu *OrderInfosUpdate) Mutation() *OrderInfosMutation {
	return oiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oiu *OrderInfosUpdate) Save(ctx context.Context) (int, error) {
	oiu.defaults()
	return withHooks(ctx, oiu.sqlSave, oiu.mutation, oiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oiu *OrderInfosUpdate) SaveX(ctx context.Context) int {
	affected, err := oiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oiu *OrderInfosUpdate) Exec(ctx context.Context) error {
	_, err := oiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiu *OrderInfosUpdate) ExecX(ctx context.Context) {
	if err := oiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiu *OrderInfosUpdate) defaults() {
	if _, ok := oiu.mutation.UpdateTime(); !ok {
		v := orderinfos.UpdateDefaultUpdateTime()
		oiu.mutation.SetUpdateTime(v)
	}
}

func (oiu *OrderInfosUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderinfos.Table, orderinfos.Columns, sqlgraph.NewFieldSpec(orderinfos.FieldID, field.TypeInt))
	if ps := oiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiu.mutation.OrderID(); ok {
		_spec.SetField(orderinfos.FieldOrderID, field.TypeInt32, value)
	}
	if value, ok := oiu.mutation.AddedOrderID(); ok {
		_spec.AddField(orderinfos.FieldOrderID, field.TypeInt32, value)
	}
	if value, ok := oiu.mutation.CourseID(); ok {
		_spec.SetField(orderinfos.FieldCourseID, field.TypeInt32, value)
	}
	if value, ok := oiu.mutation.AddedCourseID(); ok {
		_spec.AddField(orderinfos.FieldCourseID, field.TypeInt32, value)
	}
	if value, ok := oiu.mutation.CourseName(); ok {
		_spec.SetField(orderinfos.FieldCourseName, field.TypeString, value)
	}
	if value, ok := oiu.mutation.CoursePrice(); ok {
		_spec.SetField(orderinfos.FieldCoursePrice, field.TypeInt32, value)
	}
	if value, ok := oiu.mutation.AddedCoursePrice(); ok {
		_spec.AddField(orderinfos.FieldCoursePrice, field.TypeInt32, value)
	}
	if value, ok := oiu.mutation.CourseDescribe(); ok {
		_spec.SetField(orderinfos.FieldCourseDescribe, field.TypeString, value)
	}
	if value, ok := oiu.mutation.CreateTime(); ok {
		_spec.SetField(orderinfos.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := oiu.mutation.UpdateTime(); ok {
		_spec.SetField(orderinfos.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderinfos.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oiu.mutation.done = true
	return n, nil
}

// OrderInfosUpdateOne is the builder for updating a single OrderInfos entity.
type OrderInfosUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderInfosMutation
}

// SetOrderID sets the "order_id" field.
func (oiuo *OrderInfosUpdateOne) SetOrderID(i int32) *OrderInfosUpdateOne {
	oiuo.mutation.ResetOrderID()
	oiuo.mutation.SetOrderID(i)
	return oiuo
}

// AddOrderID adds i to the "order_id" field.
func (oiuo *OrderInfosUpdateOne) AddOrderID(i int32) *OrderInfosUpdateOne {
	oiuo.mutation.AddOrderID(i)
	return oiuo
}

// SetCourseID sets the "course_id" field.
func (oiuo *OrderInfosUpdateOne) SetCourseID(i int32) *OrderInfosUpdateOne {
	oiuo.mutation.ResetCourseID()
	oiuo.mutation.SetCourseID(i)
	return oiuo
}

// AddCourseID adds i to the "course_id" field.
func (oiuo *OrderInfosUpdateOne) AddCourseID(i int32) *OrderInfosUpdateOne {
	oiuo.mutation.AddCourseID(i)
	return oiuo
}

// SetCourseName sets the "course_name" field.
func (oiuo *OrderInfosUpdateOne) SetCourseName(s string) *OrderInfosUpdateOne {
	oiuo.mutation.SetCourseName(s)
	return oiuo
}

// SetCoursePrice sets the "course_price" field.
func (oiuo *OrderInfosUpdateOne) SetCoursePrice(i int32) *OrderInfosUpdateOne {
	oiuo.mutation.ResetCoursePrice()
	oiuo.mutation.SetCoursePrice(i)
	return oiuo
}

// AddCoursePrice adds i to the "course_price" field.
func (oiuo *OrderInfosUpdateOne) AddCoursePrice(i int32) *OrderInfosUpdateOne {
	oiuo.mutation.AddCoursePrice(i)
	return oiuo
}

// SetCourseDescribe sets the "course_describe" field.
func (oiuo *OrderInfosUpdateOne) SetCourseDescribe(s string) *OrderInfosUpdateOne {
	oiuo.mutation.SetCourseDescribe(s)
	return oiuo
}

// SetCreateTime sets the "create_time" field.
func (oiuo *OrderInfosUpdateOne) SetCreateTime(t time.Time) *OrderInfosUpdateOne {
	oiuo.mutation.SetCreateTime(t)
	return oiuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (oiuo *OrderInfosUpdateOne) SetNillableCreateTime(t *time.Time) *OrderInfosUpdateOne {
	if t != nil {
		oiuo.SetCreateTime(*t)
	}
	return oiuo
}

// SetUpdateTime sets the "update_time" field.
func (oiuo *OrderInfosUpdateOne) SetUpdateTime(t time.Time) *OrderInfosUpdateOne {
	oiuo.mutation.SetUpdateTime(t)
	return oiuo
}

// Mutation returns the OrderInfosMutation object of the builder.
func (oiuo *OrderInfosUpdateOne) Mutation() *OrderInfosMutation {
	return oiuo.mutation
}

// Where appends a list predicates to the OrderInfosUpdate builder.
func (oiuo *OrderInfosUpdateOne) Where(ps ...predicate.OrderInfos) *OrderInfosUpdateOne {
	oiuo.mutation.Where(ps...)
	return oiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oiuo *OrderInfosUpdateOne) Select(field string, fields ...string) *OrderInfosUpdateOne {
	oiuo.fields = append([]string{field}, fields...)
	return oiuo
}

// Save executes the query and returns the updated OrderInfos entity.
func (oiuo *OrderInfosUpdateOne) Save(ctx context.Context) (*OrderInfos, error) {
	oiuo.defaults()
	return withHooks(ctx, oiuo.sqlSave, oiuo.mutation, oiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oiuo *OrderInfosUpdateOne) SaveX(ctx context.Context) *OrderInfos {
	node, err := oiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oiuo *OrderInfosUpdateOne) Exec(ctx context.Context) error {
	_, err := oiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiuo *OrderInfosUpdateOne) ExecX(ctx context.Context) {
	if err := oiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiuo *OrderInfosUpdateOne) defaults() {
	if _, ok := oiuo.mutation.UpdateTime(); !ok {
		v := orderinfos.UpdateDefaultUpdateTime()
		oiuo.mutation.SetUpdateTime(v)
	}
}

func (oiuo *OrderInfosUpdateOne) sqlSave(ctx context.Context) (_node *OrderInfos, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderinfos.Table, orderinfos.Columns, sqlgraph.NewFieldSpec(orderinfos.FieldID, field.TypeInt))
	id, ok := oiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderInfos.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderinfos.FieldID)
		for _, f := range fields {
			if !orderinfos.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderinfos.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiuo.mutation.OrderID(); ok {
		_spec.SetField(orderinfos.FieldOrderID, field.TypeInt32, value)
	}
	if value, ok := oiuo.mutation.AddedOrderID(); ok {
		_spec.AddField(orderinfos.FieldOrderID, field.TypeInt32, value)
	}
	if value, ok := oiuo.mutation.CourseID(); ok {
		_spec.SetField(orderinfos.FieldCourseID, field.TypeInt32, value)
	}
	if value, ok := oiuo.mutation.AddedCourseID(); ok {
		_spec.AddField(orderinfos.FieldCourseID, field.TypeInt32, value)
	}
	if value, ok := oiuo.mutation.CourseName(); ok {
		_spec.SetField(orderinfos.FieldCourseName, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.CoursePrice(); ok {
		_spec.SetField(orderinfos.FieldCoursePrice, field.TypeInt32, value)
	}
	if value, ok := oiuo.mutation.AddedCoursePrice(); ok {
		_spec.AddField(orderinfos.FieldCoursePrice, field.TypeInt32, value)
	}
	if value, ok := oiuo.mutation.CourseDescribe(); ok {
		_spec.SetField(orderinfos.FieldCourseDescribe, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.CreateTime(); ok {
		_spec.SetField(orderinfos.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := oiuo.mutation.UpdateTime(); ok {
		_spec.SetField(orderinfos.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &OrderInfos{config: oiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderinfos.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oiuo.mutation.done = true
	return _node, nil
}
