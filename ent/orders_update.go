// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/orders"
	"kubecit-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrdersUpdate is the builder for updating Orders entities.
type OrdersUpdate struct {
	config
	hooks    []Hook
	mutation *OrdersMutation
}

// Where appends a list predicates to the OrdersUpdate builder.
func (ou *OrdersUpdate) Where(ps ...predicate.Orders) *OrdersUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUserID sets the "user_id" field.
func (ou *OrdersUpdate) SetUserID(i int32) *OrdersUpdate {
	ou.mutation.ResetUserID()
	ou.mutation.SetUserID(i)
	return ou
}

// AddUserID adds i to the "user_id" field.
func (ou *OrdersUpdate) AddUserID(i int32) *OrdersUpdate {
	ou.mutation.AddUserID(i)
	return ou
}

// SetOrderSn sets the "order_sn" field.
func (ou *OrdersUpdate) SetOrderSn(s string) *OrdersUpdate {
	ou.mutation.SetOrderSn(s)
	return ou
}

// SetPayType sets the "pay_type" field.
func (ou *OrdersUpdate) SetPayType(i int32) *OrdersUpdate {
	ou.mutation.ResetPayType()
	ou.mutation.SetPayType(i)
	return ou
}

// SetNillablePayType sets the "pay_type" field if the given value is not nil.
func (ou *OrdersUpdate) SetNillablePayType(i *int32) *OrdersUpdate {
	if i != nil {
		ou.SetPayType(*i)
	}
	return ou
}

// AddPayType adds i to the "pay_type" field.
func (ou *OrdersUpdate) AddPayType(i int32) *OrdersUpdate {
	ou.mutation.AddPayType(i)
	return ou
}

// SetPayStatus sets the "pay_status" field.
func (ou *OrdersUpdate) SetPayStatus(i int32) *OrdersUpdate {
	ou.mutation.ResetPayStatus()
	ou.mutation.SetPayStatus(i)
	return ou
}

// SetNillablePayStatus sets the "pay_status" field if the given value is not nil.
func (ou *OrdersUpdate) SetNillablePayStatus(i *int32) *OrdersUpdate {
	if i != nil {
		ou.SetPayStatus(*i)
	}
	return ou
}

// AddPayStatus adds i to the "pay_status" field.
func (ou *OrdersUpdate) AddPayStatus(i int32) *OrdersUpdate {
	ou.mutation.AddPayStatus(i)
	return ou
}

// ClearPayStatus clears the value of the "pay_status" field.
func (ou *OrdersUpdate) ClearPayStatus() *OrdersUpdate {
	ou.mutation.ClearPayStatus()
	return ou
}

// SetTradePrice sets the "trade_price" field.
func (ou *OrdersUpdate) SetTradePrice(i int32) *OrdersUpdate {
	ou.mutation.ResetTradePrice()
	ou.mutation.SetTradePrice(i)
	return ou
}

// AddTradePrice adds i to the "trade_price" field.
func (ou *OrdersUpdate) AddTradePrice(i int32) *OrdersUpdate {
	ou.mutation.AddTradePrice(i)
	return ou
}

// SetTradeNo sets the "trade_no" field.
func (ou *OrdersUpdate) SetTradeNo(s string) *OrdersUpdate {
	ou.mutation.SetTradeNo(s)
	return ou
}

// SetNillableTradeNo sets the "trade_no" field if the given value is not nil.
func (ou *OrdersUpdate) SetNillableTradeNo(s *string) *OrdersUpdate {
	if s != nil {
		ou.SetTradeNo(*s)
	}
	return ou
}

// ClearTradeNo clears the value of the "trade_no" field.
func (ou *OrdersUpdate) ClearTradeNo() *OrdersUpdate {
	ou.mutation.ClearTradeNo()
	return ou
}

// SetPayTime sets the "pay_time" field.
func (ou *OrdersUpdate) SetPayTime(t time.Time) *OrdersUpdate {
	ou.mutation.SetPayTime(t)
	return ou
}

// SetNillablePayTime sets the "pay_time" field if the given value is not nil.
func (ou *OrdersUpdate) SetNillablePayTime(t *time.Time) *OrdersUpdate {
	if t != nil {
		ou.SetPayTime(*t)
	}
	return ou
}

// ClearPayTime clears the value of the "pay_time" field.
func (ou *OrdersUpdate) ClearPayTime() *OrdersUpdate {
	ou.mutation.ClearPayTime()
	return ou
}

// SetCreateTime sets the "create_time" field.
func (ou *OrdersUpdate) SetCreateTime(t time.Time) *OrdersUpdate {
	ou.mutation.SetCreateTime(t)
	return ou
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ou *OrdersUpdate) SetNillableCreateTime(t *time.Time) *OrdersUpdate {
	if t != nil {
		ou.SetCreateTime(*t)
	}
	return ou
}

// SetUpdateTime sets the "update_time" field.
func (ou *OrdersUpdate) SetUpdateTime(t time.Time) *OrdersUpdate {
	ou.mutation.SetUpdateTime(t)
	return ou
}

// Mutation returns the OrdersMutation object of the builder.
func (ou *OrdersUpdate) Mutation() *OrdersMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrdersUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrdersUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrdersUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrdersUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrdersUpdate) defaults() {
	if _, ok := ou.mutation.UpdateTime(); !ok {
		v := orders.UpdateDefaultUpdateTime()
		ou.mutation.SetUpdateTime(v)
	}
}

func (ou *OrdersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orders.Table, orders.Columns, sqlgraph.NewFieldSpec(orders.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UserID(); ok {
		_spec.SetField(orders.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := ou.mutation.AddedUserID(); ok {
		_spec.AddField(orders.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := ou.mutation.OrderSn(); ok {
		_spec.SetField(orders.FieldOrderSn, field.TypeString, value)
	}
	if value, ok := ou.mutation.PayType(); ok {
		_spec.SetField(orders.FieldPayType, field.TypeInt32, value)
	}
	if value, ok := ou.mutation.AddedPayType(); ok {
		_spec.AddField(orders.FieldPayType, field.TypeInt32, value)
	}
	if value, ok := ou.mutation.PayStatus(); ok {
		_spec.SetField(orders.FieldPayStatus, field.TypeInt32, value)
	}
	if value, ok := ou.mutation.AddedPayStatus(); ok {
		_spec.AddField(orders.FieldPayStatus, field.TypeInt32, value)
	}
	if ou.mutation.PayStatusCleared() {
		_spec.ClearField(orders.FieldPayStatus, field.TypeInt32)
	}
	if value, ok := ou.mutation.TradePrice(); ok {
		_spec.SetField(orders.FieldTradePrice, field.TypeInt32, value)
	}
	if value, ok := ou.mutation.AddedTradePrice(); ok {
		_spec.AddField(orders.FieldTradePrice, field.TypeInt32, value)
	}
	if value, ok := ou.mutation.TradeNo(); ok {
		_spec.SetField(orders.FieldTradeNo, field.TypeString, value)
	}
	if ou.mutation.TradeNoCleared() {
		_spec.ClearField(orders.FieldTradeNo, field.TypeString)
	}
	if value, ok := ou.mutation.PayTime(); ok {
		_spec.SetField(orders.FieldPayTime, field.TypeTime, value)
	}
	if ou.mutation.PayTimeCleared() {
		_spec.ClearField(orders.FieldPayTime, field.TypeTime)
	}
	if value, ok := ou.mutation.CreateTime(); ok {
		_spec.SetField(orders.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := ou.mutation.UpdateTime(); ok {
		_spec.SetField(orders.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orders.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrdersUpdateOne is the builder for updating a single Orders entity.
type OrdersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrdersMutation
}

// SetUserID sets the "user_id" field.
func (ouo *OrdersUpdateOne) SetUserID(i int32) *OrdersUpdateOne {
	ouo.mutation.ResetUserID()
	ouo.mutation.SetUserID(i)
	return ouo
}

// AddUserID adds i to the "user_id" field.
func (ouo *OrdersUpdateOne) AddUserID(i int32) *OrdersUpdateOne {
	ouo.mutation.AddUserID(i)
	return ouo
}

// SetOrderSn sets the "order_sn" field.
func (ouo *OrdersUpdateOne) SetOrderSn(s string) *OrdersUpdateOne {
	ouo.mutation.SetOrderSn(s)
	return ouo
}

// SetPayType sets the "pay_type" field.
func (ouo *OrdersUpdateOne) SetPayType(i int32) *OrdersUpdateOne {
	ouo.mutation.ResetPayType()
	ouo.mutation.SetPayType(i)
	return ouo
}

// SetNillablePayType sets the "pay_type" field if the given value is not nil.
func (ouo *OrdersUpdateOne) SetNillablePayType(i *int32) *OrdersUpdateOne {
	if i != nil {
		ouo.SetPayType(*i)
	}
	return ouo
}

// AddPayType adds i to the "pay_type" field.
func (ouo *OrdersUpdateOne) AddPayType(i int32) *OrdersUpdateOne {
	ouo.mutation.AddPayType(i)
	return ouo
}

// SetPayStatus sets the "pay_status" field.
func (ouo *OrdersUpdateOne) SetPayStatus(i int32) *OrdersUpdateOne {
	ouo.mutation.ResetPayStatus()
	ouo.mutation.SetPayStatus(i)
	return ouo
}

// SetNillablePayStatus sets the "pay_status" field if the given value is not nil.
func (ouo *OrdersUpdateOne) SetNillablePayStatus(i *int32) *OrdersUpdateOne {
	if i != nil {
		ouo.SetPayStatus(*i)
	}
	return ouo
}

// AddPayStatus adds i to the "pay_status" field.
func (ouo *OrdersUpdateOne) AddPayStatus(i int32) *OrdersUpdateOne {
	ouo.mutation.AddPayStatus(i)
	return ouo
}

// ClearPayStatus clears the value of the "pay_status" field.
func (ouo *OrdersUpdateOne) ClearPayStatus() *OrdersUpdateOne {
	ouo.mutation.ClearPayStatus()
	return ouo
}

// SetTradePrice sets the "trade_price" field.
func (ouo *OrdersUpdateOne) SetTradePrice(i int32) *OrdersUpdateOne {
	ouo.mutation.ResetTradePrice()
	ouo.mutation.SetTradePrice(i)
	return ouo
}

// AddTradePrice adds i to the "trade_price" field.
func (ouo *OrdersUpdateOne) AddTradePrice(i int32) *OrdersUpdateOne {
	ouo.mutation.AddTradePrice(i)
	return ouo
}

// SetTradeNo sets the "trade_no" field.
func (ouo *OrdersUpdateOne) SetTradeNo(s string) *OrdersUpdateOne {
	ouo.mutation.SetTradeNo(s)
	return ouo
}

// SetNillableTradeNo sets the "trade_no" field if the given value is not nil.
func (ouo *OrdersUpdateOne) SetNillableTradeNo(s *string) *OrdersUpdateOne {
	if s != nil {
		ouo.SetTradeNo(*s)
	}
	return ouo
}

// ClearTradeNo clears the value of the "trade_no" field.
func (ouo *OrdersUpdateOne) ClearTradeNo() *OrdersUpdateOne {
	ouo.mutation.ClearTradeNo()
	return ouo
}

// SetPayTime sets the "pay_time" field.
func (ouo *OrdersUpdateOne) SetPayTime(t time.Time) *OrdersUpdateOne {
	ouo.mutation.SetPayTime(t)
	return ouo
}

// SetNillablePayTime sets the "pay_time" field if the given value is not nil.
func (ouo *OrdersUpdateOne) SetNillablePayTime(t *time.Time) *OrdersUpdateOne {
	if t != nil {
		ouo.SetPayTime(*t)
	}
	return ouo
}

// ClearPayTime clears the value of the "pay_time" field.
func (ouo *OrdersUpdateOne) ClearPayTime() *OrdersUpdateOne {
	ouo.mutation.ClearPayTime()
	return ouo
}

// SetCreateTime sets the "create_time" field.
func (ouo *OrdersUpdateOne) SetCreateTime(t time.Time) *OrdersUpdateOne {
	ouo.mutation.SetCreateTime(t)
	return ouo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ouo *OrdersUpdateOne) SetNillableCreateTime(t *time.Time) *OrdersUpdateOne {
	if t != nil {
		ouo.SetCreateTime(*t)
	}
	return ouo
}

// SetUpdateTime sets the "update_time" field.
func (ouo *OrdersUpdateOne) SetUpdateTime(t time.Time) *OrdersUpdateOne {
	ouo.mutation.SetUpdateTime(t)
	return ouo
}

// Mutation returns the OrdersMutation object of the builder.
func (ouo *OrdersUpdateOne) Mutation() *OrdersMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OrdersUpdate builder.
func (ouo *OrdersUpdateOne) Where(ps ...predicate.Orders) *OrdersUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrdersUpdateOne) Select(field string, fields ...string) *OrdersUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Orders entity.
func (ouo *OrdersUpdateOne) Save(ctx context.Context) (*Orders, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrdersUpdateOne) SaveX(ctx context.Context) *Orders {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrdersUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrdersUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrdersUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdateTime(); !ok {
		v := orders.UpdateDefaultUpdateTime()
		ouo.mutation.SetUpdateTime(v)
	}
}

func (ouo *OrdersUpdateOne) sqlSave(ctx context.Context) (_node *Orders, err error) {
	_spec := sqlgraph.NewUpdateSpec(orders.Table, orders.Columns, sqlgraph.NewFieldSpec(orders.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Orders.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orders.FieldID)
		for _, f := range fields {
			if !orders.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orders.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UserID(); ok {
		_spec.SetField(orders.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := ouo.mutation.AddedUserID(); ok {
		_spec.AddField(orders.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := ouo.mutation.OrderSn(); ok {
		_spec.SetField(orders.FieldOrderSn, field.TypeString, value)
	}
	if value, ok := ouo.mutation.PayType(); ok {
		_spec.SetField(orders.FieldPayType, field.TypeInt32, value)
	}
	if value, ok := ouo.mutation.AddedPayType(); ok {
		_spec.AddField(orders.FieldPayType, field.TypeInt32, value)
	}
	if value, ok := ouo.mutation.PayStatus(); ok {
		_spec.SetField(orders.FieldPayStatus, field.TypeInt32, value)
	}
	if value, ok := ouo.mutation.AddedPayStatus(); ok {
		_spec.AddField(orders.FieldPayStatus, field.TypeInt32, value)
	}
	if ouo.mutation.PayStatusCleared() {
		_spec.ClearField(orders.FieldPayStatus, field.TypeInt32)
	}
	if value, ok := ouo.mutation.TradePrice(); ok {
		_spec.SetField(orders.FieldTradePrice, field.TypeInt32, value)
	}
	if value, ok := ouo.mutation.AddedTradePrice(); ok {
		_spec.AddField(orders.FieldTradePrice, field.TypeInt32, value)
	}
	if value, ok := ouo.mutation.TradeNo(); ok {
		_spec.SetField(orders.FieldTradeNo, field.TypeString, value)
	}
	if ouo.mutation.TradeNoCleared() {
		_spec.ClearField(orders.FieldTradeNo, field.TypeString)
	}
	if value, ok := ouo.mutation.PayTime(); ok {
		_spec.SetField(orders.FieldPayTime, field.TypeTime, value)
	}
	if ouo.mutation.PayTimeCleared() {
		_spec.ClearField(orders.FieldPayTime, field.TypeTime)
	}
	if value, ok := ouo.mutation.CreateTime(); ok {
		_spec.SetField(orders.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.UpdateTime(); ok {
		_spec.SetField(orders.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &Orders{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orders.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
