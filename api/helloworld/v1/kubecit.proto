syntax = "proto3";

package helloworld.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "kubecit-service/api/helloworld/v1;v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.helloworld.v1";
option java_outer_classname = "HelloworldProtoV1";

// The greeting service definition.
service Kubecit {
  // ========================== 分类相关接口 ===================================

  rpc ListCategory (ListCategoryReq) returns (ListCategoryResp) {
    option (google.api.http) = {
      get: "/api/categories"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "分类列表"
      tags: "catetory"
    };
  }

  rpc CreateCategory (CategoryInfo) returns (Empty) {
    option (google.api.http) = {
      post: "/api/categories"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "创建分类"
      tags: "catetory"
    };
  }

  rpc DeleteCategory (DeleteCategoryReq) returns (Empty) {
    option (google.api.http) = {
      delete: "/api/categories"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "删除分类"
      tags: "catetory"
    };
  }

  rpc UpdateCategory (UpdateCategoryReq) returns (Empty) {
    option (google.api.http) = {
      put: "/api/categories"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "更新分类"
      tags: "catetory"
    };
  }


  // ========================== 课程相关接口 ===================================
  rpc MostNew (Empty) returns (MostNewReply) {
    option (google.api.http) = {
      post: "/api/course/mostNew",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "获取最新课程列表"
      tags: "course"
    };
  }

  rpc TagsList (TagsListRequest) returns (TagsListReply) {
    option (google.api.http) = {
      post: "/api/course/tags/list",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "获取课程标签列表"
      tags: "course"
    };
  }
  rpc SearchCourse (SearchCourseRequest) returns (SearchCourseReply) {
    option (google.api.http) = {
      post: "/api/course/search",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "筛选课程列表"
      tags: "course"
    };
  }
  rpc UpdateCourse (UpdateCourseRequest) returns (UpdateCourseReply) {
    option (google.api.http) = {
      put: "/api/course/{id}",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "更新课程信息"
      tags: "course"
    };
  }
  rpc ReviewCourse (ReviewCourseRequest) returns (ReviewCourseReply) {
    option (google.api.http) = {
      patch: "/api/course/{id}",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "审核课程"
      tags: "course"
    };
  }


  // ========================== 用户相关接口 ===================================
  rpc GetInfo (GetInfoRequest) returns (UserInfoReply) {
    option (google.api.http) = {
      get: "/api/member/getInfo",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "用户信息"
      tags: "user"
    };
  }

  rpc LoginByJson (LoginByJsonRequest) returns (LoginByJsonReply) {
    option (google.api.http) = {
      post: "/api/u/loginByJson",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "用户登录"
      tags: "user"
    };
  }

  rpc RegisterUsername (RegisterUsernameRequest) returns (RegisterUsernameReply) {
    option (google.api.http) = {
      post: "/api/u/registerUsername",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "用户账号密码注册"
      tags: "user"
    };
  }


  // ========================== 系统设置相关接口 ===================================
  rpc CreateSlider (CreateSliderRequest) returns (CreateSliderReply) {
    option (google.api.http) = {
      post: "/api/slider",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "首页轮播图创建"
      tags: "system"
    };
  }

  rpc GetSlider (GetSliderRequest) returns (GetSliderReply) {
    option (google.api.http) = {
      get: "/api/slider/{id}",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "首页轮播图获取单个"
      tags: "system"
    };
  }

  rpc DeleteSlider (DeleteSliderRequest) returns (DeleteSliderReply) {
    option (google.api.http) = {
      delete: "/api/slider/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "首页轮播图删除"
      tags: "system"
    };
  }

  rpc UpdateSlider (UpdateSliderRequest) returns (UpdateSliderReply) {
    option (google.api.http) = {
      put: "/api/slider/{id}",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "首页轮播图更新"
      tags: "system"
    };
  }

  rpc ListSlidersByPriority (Empty) returns (ListSlidersByPriorityReply) {
    option (google.api.http) = {
      get: "/api/sliders",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "首页轮播图展示"
      tags: "system"
    };
  }

}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

message Empty {

}


message ListCategoryReq {
  int32 level = 1;
}

message ListCategoryResp{
  repeated CategoryInfo categories = 1;
}


message CategoryInfo {
  string categoryName = 1;
  int32 parentId = 3;
  int32 level = 4;
  int32 id = 5;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}



message PageRequest {
  int32 pageNum = 1;
  int32 pageSize = 2;
}

message Metadata {
  string msg = 1;
  string code = 2;
  bool success = 3;
  string version = 4;
  string timestamp = 5;
}

message MostNewReply {
  repeated CourseInfo list = 9;
}

message MostNewReplyData {
  PageInfo pageInfo = 1;
}

message PageInfo {
  int32 startRow = 1;
  repeated int32 navigatepageNums = 2;
  int32 lastPage = 3;
  int32 prePage = 4;
  bool hasNextPage = 5;
  int32 nextPage = 6;
  int32 pageSize = 7;
  int32 endRow = 8;
  repeated CourseInfo list = 9;
  int32 pageNum = 10;
  int32 navigatePages = 11;
  int32 total = 12;
  int32 navigateFirstPage = 13;
  int32 pages = 14;
  int32 size = 15;
  int32 firstPage = 16;
  bool isLastPage = 17;
  bool hasPreviousPage = 18;
  int32 navigateLastPage = 19;
  bool isFirstPage = 20;
}

enum CourseStatus {
  NOT_REVIEWED = 0; // 未审核
  REVIEWED = 1; // 已审核
  SHELVED = 2; // 已上架
  OFF_SHELVED = 3; // 已下架
}

message CourseInfo {
  int32 id = 1;
  int32 level = 2;
  string name = 3;
  string detail = 4;
  string cover = 5;
  float price = 6;
  repeated string tags = 7;
  CourseStatus status = 8;
  int32 categoryId = 9;
  google.protobuf.Timestamp createdAt = 10;
  google.protobuf.Timestamp updatedAt = 11;
}



message TagsListRequest {
  int32 pageNum = 1;
  int32 pageSize = 2;
  int32 course = 3;
}

message TagsListReply {
  repeated Tag tags = 1;
}

message Tag {
  string name = 1;
}

message SearchCourseRequest {
  int32 pageNum = 1;
  int32 pageSize = 2;
  int32 category = 3;
}

message SearchCourseReply {
  Metadata meta = 1;
  PageInfo data = 2;
}

message UpdateCourseRequest {
  int32 id = 1;
  int32 level = 2;
  string name = 3;
  string detail = 4;
  string cover = 5;
  float price = 6;
  repeated string tags = 7;
  int32 categoryId = 9;
}

message UpdateCourseReply {
  CourseInfo data = 1;
}

message ReviewCourseRequest {
  int32 id = 1;
  CourseStatus status = 2;
}

message ReviewCourseReply {
  CourseInfo data = 1;
}

message SliderInfo {
  int32 id = 1;
  string title = 2;
  string content = 3;
  string imageLink = 4;
  google.protobuf.Timestamp createAt = 5;
  google.protobuf.Timestamp updateAt = 6;
  bool isValid = 7;
  int32 priority = 8;
}

message CreateSliderRequest {
  string title = 1;
  string content = 2;
  string imageLink = 3;
  bool isValid = 4;
  int32 priority = 5;
}

message CreateSliderReply {
  SliderInfo data = 2;
}

message GetSliderRequest {
  int32 id = 1;
}

message GetSliderReply {
  SliderInfo data = 2;
}

message DeleteSliderRequest {
  int32 id = 1;
}

message DeleteSliderReply {
  int32 count = 2;
}

message UpdateSliderRequest {
  int32 id = 1;
  string title = 2;
  string content = 3;
  string imageLink = 4;
  bool isValid = 5;
  int32 priority = 6;
}

message UpdateSliderReply {
  SliderInfo data = 2;
}

message ListSlidersByPriorityRequest {
  int32 priority = 1;
  int32 count = 2;
}

message ListSlidersByPriorityReply {
  repeated SliderInfo data = 1;
}

message CreateTokenRequest {}
message CreateTokenReply {
  Metadata meta = 1;
  map<string, string> data = 2;
}

message GetInfoRequest {}
message UserInfoReply{
  string username = 1;
  uint32 role_id = 2;
  string channel = 3;
}

message GetInfoReply {
  Metadata meta = 1;
  GetInfoReplyData data = 2;
}

message GetInfoReplyData {
  google.protobuf.Timestamp birthday = 1;
  string sysCode = 2;
  int32 gender = 3;
  string city = 4;
  repeated string loginType = 5;
  string county = 6;
  string highestEducation = 7;
  int32 isEnable = 8;
  string password = 9;
  string province = 10;
  string updateBy = 11;
  float totalHour = 12;
  string id = 13;
  string platformAuthuser = 14;
  string email = 15;
  string qq = 16;
  string address = 17;
  string nickName = 21;
  string emergencyContact = 22;
  string emergencyContactNumber = 23;
  string mobile = 24;
  string wechat = 25;
  int32 regSource = 26;
  string telephone = 27;
  google.protobuf.Timestamp updateTime = 28;
  string avatar = 29;
  string realName = 30;
  string createBy = 31;
  MemberVIPInfo vipInfo = 32;
  string personalSignature = 33;
  string certificateNumber = 34;
  google.protobuf.Timestamp createTime = 35;
  int32 age = 36;
  string residenceAddress = 37;
  string username = 38;
  string certificateType = 39;
}

message MemberVIPInfo {
  string orderNumber = 1;
  string vipName = 2;
  string vipId = 3;
  string vipDesc = 4;
  google.protobuf.Timestamp startTime = 5;
  string id = 6;
  google.protobuf.Timestamp endTime = 7;
  int32 isExpired = 8;
  string memberId = 9;
  string vipIcon = 10;
}

message LoginByJsonRequest {
  string username = 1;
  string password = 2;
}

message LoginByJsonReply {
  Metadata meta = 1;
  LoginByJsonReplyData data = 2;
}

message RegisterUsernameRequest {
  string username = 1 [(validate.rules).string.pattern = "^[a-zA-Z0-9]+$"];
  string password = 2 [(validate.rules).string.min_len = 6];
}


message RegisterUsernameReply {
  Metadata meta = 1;
  LoginByJsonReplyData data = 2;
}


message LoginByJsonReplyData {
  string accessToken = 1;
}

message DeleteCategoryReq {
  int32 id = 1;
}

message UpdateCategoryReq {
  string categoryName = 1;
  int32 id = 2;
}
