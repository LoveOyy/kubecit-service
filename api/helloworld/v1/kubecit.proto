syntax = "proto3";

package helloworld.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "kubecit-service/api/helloworld/v1;v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.helloworld.v1";
option java_outer_classname = "HelloworldProtoV1";

// The greeting service definition.
service Kubecit {
  // ========================== 分类相关接口 ===================================

  rpc ListCategory (ListCategoryReq) returns (ListCategoryResp) {
    option (google.api.http) = {
      get: "/api/categories"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "分类列表"
      tags: "catetory"
    };
  }

  rpc ListCategoryV2 (Empty) returns (ListCategoryResp) {
    option (google.api.http) = {
      get: "/api/categories/v2"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "分类列表v2"
      tags: "catetory"
    };
  }

  rpc CreateCategory (CategoryInfo) returns (Empty) {
    option (google.api.http) = {
      post: "/api/categories"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "创建分类"
      tags: "catetory"
    };
  }

  rpc DeleteCategory (DeleteCategoryReq) returns (Empty) {
    option (google.api.http) = {
      delete: "/api/categories"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "删除分类"
      tags: "catetory"
    };
  }

  rpc UpdateCategory (UpdateCategoryReq) returns (Empty) {
    option (google.api.http) = {
      put: "/api/categories"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "更新分类"
      tags: "catetory"
    };
  }


  // ========================== 课程相关接口 ===================================
  rpc MostNew (Empty) returns (MostNewReply) {
    option (google.api.http) = {
      post: "/api/course/mostNew",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "获取最新科目列表"
      tags: "course"
    };
  }

  rpc TagsList (TagsListRequest) returns (TagsListReply) {
    option (google.api.http) = {
      post: "/api/course/tags/list",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "获取科目标签列表"
      tags: "course"
    };
  }
  rpc SearchCourse (SearchCourseRequest) returns (CourseSearchReply) {
    option (google.api.http) = {
      post: "/api/course/search",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "筛选科目列表"
      tags: "course"
    };
  }
  rpc UpdateCourse (UpdateCourseRequest) returns (UpdateCourseReply) {
    option (google.api.http) = {
      put: "/api/course/{id}",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "更新科目信息"
      tags: "course"
    };
  }
  rpc ReviewCourse (ReviewCourseRequest) returns (ReviewCourseReply) {
    option (google.api.http) = {
      patch: "/api/course/{id}",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "审核科目"
      tags: "course"
    };
  }
  rpc CreateCourse (CreateCourseRequest) returns (CreateCourseReply) {
    option (google.api.http) = {
      post: "/api/course",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "创建科目"
      tags: "course"
    };
  }
  rpc GetCourse (GetCourseRequest) returns (GetCourseReply) {
    option (google.api.http) = {
      get: "/api/course/{id}",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "获取科目信息"
      tags: "course"
    };
  }
  rpc DeleteCourse (DeleteCourseRequest) returns (DeleteCourseReply) {
    option (google.api.http) = {
      delete: "/api/course/{id}",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "删除科目"
      tags: "course"
    };
  }
  rpc CreateChapter (CreateChapterRequest) returns (CreateChapterReply) {
    option (google.api.http) = {
      post: "/api/course/chapter",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "创建章节"
      tags: "course"
    };
  }
  rpc DeleteChapter (DeleteChapterRequest) returns (DeleteChapterReply) {
    option (google.api.http) = {
      delete: "/api/course/chapter/{id}",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "删除章节"
      tags: "course"
    };
  }
  rpc ListChapters (ListChaptersRequest) returns (ListChaptersReply) {
    option (google.api.http) = {
      get: "/api/course/chapter/{courseId}",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "查询章节"
      tags: "course"
    };
  }
  rpc UpdateChapter (UpdateChapterRequest) returns (UpdateChapterReply) {
    option (google.api.http) = {
      put: "/api/course/chapter/{id}",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "更新章节"
      tags: "course"
    };
  }
  rpc CreateLesson (CreateLessonRequest) returns (CreateLessonReply) {
    option (google.api.http) = {
      post: "/api/course/lesson",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "创建课程"
      tags: "course"
    };
  }
  rpc ListLessons (ListChapterLessonsWithCourIdRequest) returns (ListChapterLessonsWithCourIdReply) {
    option (google.api.http) = {
      get: "/api/course/{courseId}/lessons",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "获取科目下所有课程"
      tags: "course"
    };
  }
  rpc UpdateLesson (UpdateLessonRequest) returns (UpdateLessonReply) {
    option (google.api.http) = {
      put: "/api/course/lesson/{lessonId}",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "更新课程"
      tags: "course"
    };
  }
  rpc DeleteLesson (DeleteLessonRequest) returns (DeleteLessonReply) {
    option (google.api.http) = {
      delete: "/api/course/lesson/{lessonId}",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "更新课程"
      tags: "course"
    };
  }

  // ========================== 用户相关接口 ===================================
  rpc GetInfo (GetInfoRequest) returns (UserInfoReply) {
    option (google.api.http) = {
      get: "/api/member/getInfo",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "用户信息"
      tags: "user"
    };
  }

  rpc LoginByJson (LoginByJsonRequest) returns (LoginByJsonReply) {
    option (google.api.http) = {
      post: "/api/u/loginByJson",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "用户登录"
      tags: "user"
    };
  }

  rpc RegisterUsername (RegisterUsernameRequest) returns (RegisterUsernameReply) {
    option (google.api.http) = {
      post: "/api/u/registerUsername",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "用户账号密码注册"
      tags: "user"
    };
  }


  // ========================== 系统设置相关接口 ===================================
  rpc CreateSlider (CreateSliderRequest) returns (CreateSliderReply) {
    option (google.api.http) = {
      post: "/api/slider",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "首页轮播图创建"
      tags: "system"
    };
  }

  rpc GetSlider (GetSliderRequest) returns (GetSliderReply) {
    option (google.api.http) = {
      get: "/api/slider/{id}",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "首页轮播图获取单个"
      tags: "system"
    };
  }

  rpc DeleteSlider (DeleteSliderRequest) returns (DeleteSliderReply) {
    option (google.api.http) = {
      delete: "/api/slider/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "首页轮播图删除"
      tags: "system"
    };
  }

  rpc UpdateSlider (UpdateSliderRequest) returns (UpdateSliderReply) {
    option (google.api.http) = {
      put: "/api/slider/{id}",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "首页轮播图更新"
      tags: "system"
    };
  }

  rpc ListSlidersByPriority (Empty) returns (ListSlidersByPriorityReply) {
    option (google.api.http) = {
      get: "/api/sliders",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "首页轮播图展示"
      tags: "system"
    };
  }

  rpc SystemSettings (Empty) returns (SystemSettingsReply) {
    option (google.api.http) = {
      get: "/api/systemsettings",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "系统设置"
      tags: "system"
    };
  }

  // ========================== 订单相关接口 ===================================
  rpc CreateOrder (CreateOrderRequest) returns (CreateOrderReply) {
    option (google.api.http) = {
      post: "/api/order",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "创建订单,传参课程[id]"
      tags: "order"
    };
  }
  //=============================讲师相关================================================
  rpc ListAllTeacher (ListAllTeacherRequest) returns (ListAllTeacherReply) {
    option (google.api.http) = {
      get: "/api/teachers",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "分页查询讲师"
      tags: "teacher"
    };
  }
  rpc GetTeacher (GetTeacherRequest) returns (TeacherInfo) {
    option (google.api.http) = {
      get: "/api/teacher/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "讲师详情"
      tags: "teacher"
    };
  }
  rpc CreateTeacher (CreateTeacherRequest) returns (TeacherInfo) {
    option (google.api.http) = {
      post: "/api/teacher",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "创建讲师"
      tags: "teacher"
    };
  }

}
message CreateTeacherRequest {
  string detail = 1; // 讲师详情
  string curriculum_vitae = 2; // 履历描述
  string works = 3; // 以往作品
  string skills = 4; // 技能点
  string avator = 5; // 头像
  string name = 6;  // 姓名
  int32 level= 17;  // 等级
}

message ListAllTeacherRequest {
  optional int32 pageNum = 1;
  optional int32 pageSize = 2;
}

message GetTeacherRequest {
  int32 id = 1;
}
message ListAllTeacherReply {
    repeated TeacherInfo teachers =1;
}

enum TeacherLevel {
  UNKNOWN = 0;
  ENTRY = 1; // 入门
  PRIMARY = 2; //初级
  INTERMEDIATE = 3; //中级
  SENIOR = 4;//高级
  MASTER = 5;//大师
}


message TeacherInfo {
  string detail = 1; // 讲师详情
  string curriculum_vitae = 2; // 履历描述
  string works = 3; // 以往作品
  string skills = 4; // 技能点
  string avator = 5; // 头像
  google.protobuf.Timestamp create_at = 6; // 创建时间
  google.protobuf.Timestamp update_at = 7; // 更新时间
  int32 id = 8;
  string name = 9;
  TeacherLevel level= 10;
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

message Empty {

}


message ListCategoryReq {
  optional int32 level = 1[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title: "分类级别",
    description: "1级分类：1；2级分类：2"
  }];
  optional int32 parentID = 2[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title: "上级分类",
    description: "列出1级分类写2级分类"
  }];
}

message ListCategoryResp{
  repeated CategoryInfo categories = 1;
}


message CategoryInfo {
  string categoryName = 1;
  int32 parentId = 3;
  int32 level = 4;
  int32 id = 5;
  repeated CategoryInfo children = 6;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}


message Metadata {
  string msg = 1;
  string code = 2;
  bool success = 3;
  string version = 4;
  string timestamp = 5;
}

message MostNewReply {
  repeated CourseInfo list = 1;
  int32 total = 2;
}

message MostNewReplyData {
  repeated CourseInfo list = 1;
}

message CourseSearchReply {
  repeated CourseInfo list = 1;
  int32 total = 2;
}

enum CourseStatus {
  NOT_REVIEWED = 0; // 未审核
  REVIEWED = 1; // 已审核
  SHELVED = 2; // 已上架
  OFF_SHELVED = 3; // 已下架
}

message CourseInfo {
  int32 id = 1;
  int32 level = 2;
  string name = 3;
  string detail = 4;
  string cover = 5;
  float price = 6;
  repeated string tags = 7;
  CourseStatus status = 8;
  int32 categoryId = 9;
  google.protobuf.Timestamp createdAt = 10;
  google.protobuf.Timestamp updatedAt = 11;
  int32 people = 12;
}



message TagsListRequest {
  int32 pageNum = 1;
  int32 pageSize = 2;
  int32 course = 3;
}

message TagsListReply {
  repeated Tag tags = 1;
}

message Tag {
  string name = 1;
}

message SearchCourseRequest {
  optional int32 pageNum = 1;
  optional int32 pageSize = 2;
  optional int32 firstCategory = 3;
  optional int32 secondCategory = 4;
  optional  int32 level = 5;
  optional int32 order = 6;
}


message UpdateCourseRequest {
  int32 id = 1;
  int32 level = 2;
  string name = 3;
  string detail = 4;
  string cover = 5;
  float price = 6;
  repeated string tags = 7;
  int32 categoryId = 9;
}

message UpdateCourseReply {
  CourseInfo data = 1;
}

message ReviewCourseRequest {
  int32 id = 1;
  CourseStatus status = 2;
}

message ReviewCourseReply {
  CourseInfo data = 1;
}

message CreateCourseRequest {
  int32 level = 2;
  string name = 3;
  string detail = 4;
  string cover = 5;
  float price = 6;
  repeated string tags = 7;
  int32 categoryId = 9;
}

message CreateCourseReply {
  CourseInfo data = 1;
}

message ListCoursesRequest {

}

message ListCoursesReply {
  repeated CourseInfo data = 1;
}

message GetCourseRequest {
  int32 id = 1;
}

message GetCourseReply {
  CourseInfo data = 1;
}

message DeleteCourseRequest {
  int32 id = 1;
}

message DeleteCourseReply {
  int32 count = 1;
}

message ChapterInfo {
  int32 id = 7;
  string name = 1;
  google.protobuf.Timestamp releasedTime = 2;
  string description = 3;
  int32 sort = 4;
  int32 hasFreePreview = 5;
  int32 courseId = 6;
}

message CreateChapterRequest {
  string name = 1;
  string description = 3;
  optional int32 sort = 4;
  optional int32 hasFreePreview = 5;
  optional int32 courseId = 6;
}
message CreateChapterReply {
  ChapterInfo data = 1;
}
message DeleteChapterRequest {
  int32 id = 1;
}
message DeleteChapterReply {
  int32 count = 1;
}
message UpdateChapterRequest {
  int32 id = 7;
  string name = 1;
  string description = 3;
  optional int32 sort = 4;
  optional int32 hasFreePreview = 5;
  optional int32 courseId = 6;
}
message UpdateChapterReply {
  ChapterInfo data = 1;
}
message ListChaptersRequest {
  int32 courseId = 1;
}
message ListChaptersReply {
  repeated ChapterInfo data = 1;
}

message CreateLessonRequest {
  string name = 1;
  optional int32 sort = 2;
  optional int32 type = 3;
  string storagePath = 4;
  string source = 5;
  string courseware = 6;
  optional int32 isFreePreview = 7;
  optional int32 chapterId = 8;
}

message CreateLessonReply {
  LessonInfo data = 1;
}

message ListChapterLessonsWithCourIdRequest {
   int32 courseId = 1;
}

message ListChapterLessonsWithCourIdReply {
  repeated ChapterLessonsInfo data = 1;
}

message ChapterLessonsInfo {
  ChapterInfo chapter = 1;
  repeated LessonInfo lessons = 2;
}

message UpdateLessonRequest {
  string name = 1;
  optional int32 sort = 2;
  optional int32 type = 3;
  string storagePath = 4;
  string source = 5;
  string courseware = 6;
  optional int32 isFreePreview = 7;
  optional int32 chapterId = 8;
   int32 lessonId = 9;
}
message UpdateLessonReply {
  string name = 1;
  int32 sort = 2;
  int32 type = 3;
  string storagePath = 4;
  string source = 5;
  string courseware = 6;
  int32 isFreePreview = 7;
  int32 chapterId = 8;
  int32 id = 9;
  google.protobuf.Timestamp releasedTime = 10;
}

message DeleteLessonRequest {
  int32 lessonId = 1;
}
message DeleteLessonReply {
  int32 count = 1;
}

message LessonInfo {
  string name = 1;
  int32 sort = 2;
  int32 type = 3;
  string storagePath = 4;
  string source = 5;
  string courseware = 6;
  int32 isFreePreview = 7;
  int32 chapterId = 8;
  int32 id = 9;
  google.protobuf.Timestamp releasedTime = 10;
}

message SliderInfo {
   int32 id = 1;
  string title = 2;
  string content = 3;
  string imageLink = 4;
  google.protobuf.Timestamp createAt = 5;
  google.protobuf.Timestamp updateAt = 6;
  bool isValid = 7;
  int32 priority = 8;
}

message CreateSliderRequest {
  string title = 1;
  string content = 2;
  string imageLink = 3;
  bool isValid = 4;
  int32 priority = 5;
}

message CreateSliderReply {
  SliderInfo data = 2;
}

message GetSliderRequest {
  int32 id = 1;
}

message GetSliderReply {
  SliderInfo data = 2;
}

message DeleteSliderRequest {
  int32 id = 1;
}

message DeleteSliderReply {
  int32 count = 2;
}

message UpdateSliderRequest {
  int32 id = 1;
  string title = 2;
  string content = 3;
  string imageLink = 4;
  bool isValid = 5;
  int32 priority = 6;
}

message UpdateSliderReply {
  SliderInfo data = 2;
}

message ListSlidersByPriorityRequest {
  int32 priority = 1;
  int32 count = 2;
}

message ListSlidersByPriorityReply {
  repeated SliderInfo data = 1;
}


message GetInfoRequest {}
message UserInfoReply{
  string username = 1;
  uint32 role_id = 2;
  string channel = 3;
}




message LoginByJsonRequest {
  string username = 1;
  string password = 2;
}

message LoginByJsonReply {
  Metadata meta = 1;
  LoginByJsonReplyData data = 2;
}

message RegisterUsernameRequest {
  string username = 1 [(validate.rules).string.pattern = "^[a-zA-Z0-9]+$"];
  string password = 2 [(validate.rules).string.min_len = 6];
}


message RegisterUsernameReply {
  Metadata meta = 1;
  LoginByJsonReplyData data = 2;
}


message LoginByJsonReplyData {
  string accessToken = 1;
}

message DeleteCategoryReq {
  int32 id = 1;
}

message UpdateCategoryReq {
  string categoryName = 1;
  int32 id = 2;
}

message SystemSettingsReply {
  string logourl = 1;
  string wechaturl = 2;
  string computerurl = 3;
}


message CreateOrderRequest {
  repeated int32 courseIds = 1;
}

message OrderDetail{
  int32 orderId = 1;
  int32 productId = 2;
  string productName = 3;
  int32 productPrice = 4;
  string productDescription = 5;
}

// 支付类型
enum PayType {
  NO_PAY = 0 ; // 还未支付
  ALIPAY = 1; // 支付宝
  WECHAT = 2; // 微信支付
  TRANSFER = 3;  // 转账
  INTERNAL = 4;  //内部币
}

//支付状态
enum PayStatus {
  UNPAID = 0; // 未支付
  PAID = 1; // 已支付
  FAILED = 2; //支付失败
  CLOSED = 3; //关闭
  CANCELED = 4; //取消
  REFUNDING = 5; //退款中
  REFUNDED = 6; //退款成功
  REFUND_FAILED = 7;//退款失败
}


message CreateOrderReply {
  int32 userId = 1;
  string orderSn = 2;
  PayType payType = 3;
  PayStatus payStatus = 4;
  int32 tradePrice = 5;
  string tradeNo = 6;
  google.protobuf.Timestamp payTime = 7;
  google.protobuf.Timestamp createTime = 8;
  google.protobuf.Timestamp updateTime = 9;
  repeated OrderDetail details = 10;
}
