// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/helloworld/v1/kubecit.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HelloRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelloRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelloRequestMultiError, or
// nil if none found.
func (m *HelloRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return HelloRequestMultiError(errors)
	}

	return nil
}

// HelloRequestMultiError is an error wrapping multiple validation errors
// returned by HelloRequest.ValidateAll() if the designated constraints aren't met.
type HelloRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloRequestMultiError) AllErrors() []error { return m }

// HelloRequestValidationError is the validation error returned by
// HelloRequest.Validate if the designated constraints aren't met.
type HelloRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloRequestValidationError) ErrorName() string { return "HelloRequestValidationError" }

// Error satisfies the builtin error interface
func (e HelloRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloRequestValidationError{}

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Empty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmptyMultiError, or nil if none found.
func (m *Empty) ValidateAll() error {
	return m.validate(true)
}

func (m *Empty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMultiError(errors)
	}

	return nil
}

// EmptyMultiError is an error wrapping multiple validation errors returned by
// Empty.ValidateAll() if the designated constraints aren't met.
type EmptyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMultiError) AllErrors() []error { return m }

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// Validate checks the field values on ListCategoryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCategoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoryReqMultiError, or nil if none found.
func (m *ListCategoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Level != nil {
		// no validation rules for Level
	}

	if m.ParentID != nil {
		// no validation rules for ParentID
	}

	if len(errors) > 0 {
		return ListCategoryReqMultiError(errors)
	}

	return nil
}

// ListCategoryReqMultiError is an error wrapping multiple validation errors
// returned by ListCategoryReq.ValidateAll() if the designated constraints
// aren't met.
type ListCategoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoryReqMultiError) AllErrors() []error { return m }

// ListCategoryReqValidationError is the validation error returned by
// ListCategoryReq.Validate if the designated constraints aren't met.
type ListCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoryReqValidationError) ErrorName() string { return "ListCategoryReqValidationError" }

// Error satisfies the builtin error interface
func (e ListCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoryReqValidationError{}

// Validate checks the field values on ListCategoryResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCategoryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoryResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoryRespMultiError, or nil if none found.
func (m *ListCategoryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCategoryRespValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCategoryRespValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCategoryRespValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCategoryRespMultiError(errors)
	}

	return nil
}

// ListCategoryRespMultiError is an error wrapping multiple validation errors
// returned by ListCategoryResp.ValidateAll() if the designated constraints
// aren't met.
type ListCategoryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoryRespMultiError) AllErrors() []error { return m }

// ListCategoryRespValidationError is the validation error returned by
// ListCategoryResp.Validate if the designated constraints aren't met.
type ListCategoryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoryRespValidationError) ErrorName() string { return "ListCategoryRespValidationError" }

// Error satisfies the builtin error interface
func (e ListCategoryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoryRespValidationError{}

// Validate checks the field values on CategoryInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CategoryInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryInfoMultiError, or
// nil if none found.
func (m *CategoryInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CategoryName

	// no validation rules for ParentId

	// no validation rules for Level

	// no validation rules for Id

	if len(errors) > 0 {
		return CategoryInfoMultiError(errors)
	}

	return nil
}

// CategoryInfoMultiError is an error wrapping multiple validation errors
// returned by CategoryInfo.ValidateAll() if the designated constraints aren't met.
type CategoryInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryInfoMultiError) AllErrors() []error { return m }

// CategoryInfoValidationError is the validation error returned by
// CategoryInfo.Validate if the designated constraints aren't met.
type CategoryInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryInfoValidationError) ErrorName() string { return "CategoryInfoValidationError" }

// Error satisfies the builtin error interface
func (e CategoryInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryInfoValidationError{}

// Validate checks the field values on HelloReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelloReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelloReplyMultiError, or
// nil if none found.
func (m *HelloReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return HelloReplyMultiError(errors)
	}

	return nil
}

// HelloReplyMultiError is an error wrapping multiple validation errors
// returned by HelloReply.ValidateAll() if the designated constraints aren't met.
type HelloReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloReplyMultiError) AllErrors() []error { return m }

// HelloReplyValidationError is the validation error returned by
// HelloReply.Validate if the designated constraints aren't met.
type HelloReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloReplyValidationError) ErrorName() string { return "HelloReplyValidationError" }

// Error satisfies the builtin error interface
func (e HelloReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloReplyValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetadataMultiError, or nil
// if none found.
func (m *Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	// no validation rules for Code

	// no validation rules for Success

	// no validation rules for Version

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return MetadataMultiError(errors)
	}

	return nil
}

// MetadataMultiError is an error wrapping multiple validation errors returned
// by Metadata.ValidateAll() if the designated constraints aren't met.
type MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetadataMultiError) AllErrors() []error { return m }

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on MostNewReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MostNewReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MostNewReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MostNewReplyMultiError, or
// nil if none found.
func (m *MostNewReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MostNewReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MostNewReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MostNewReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MostNewReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MostNewReplyMultiError(errors)
	}

	return nil
}

// MostNewReplyMultiError is an error wrapping multiple validation errors
// returned by MostNewReply.ValidateAll() if the designated constraints aren't met.
type MostNewReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MostNewReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MostNewReplyMultiError) AllErrors() []error { return m }

// MostNewReplyValidationError is the validation error returned by
// MostNewReply.Validate if the designated constraints aren't met.
type MostNewReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MostNewReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MostNewReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MostNewReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MostNewReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MostNewReplyValidationError) ErrorName() string { return "MostNewReplyValidationError" }

// Error satisfies the builtin error interface
func (e MostNewReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMostNewReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MostNewReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MostNewReplyValidationError{}

// Validate checks the field values on MostNewReplyData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MostNewReplyData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MostNewReplyData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MostNewReplyDataMultiError, or nil if none found.
func (m *MostNewReplyData) ValidateAll() error {
	return m.validate(true)
}

func (m *MostNewReplyData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MostNewReplyDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MostNewReplyDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MostNewReplyDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MostNewReplyDataMultiError(errors)
	}

	return nil
}

// MostNewReplyDataMultiError is an error wrapping multiple validation errors
// returned by MostNewReplyData.ValidateAll() if the designated constraints
// aren't met.
type MostNewReplyDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MostNewReplyDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MostNewReplyDataMultiError) AllErrors() []error { return m }

// MostNewReplyDataValidationError is the validation error returned by
// MostNewReplyData.Validate if the designated constraints aren't met.
type MostNewReplyDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MostNewReplyDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MostNewReplyDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MostNewReplyDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MostNewReplyDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MostNewReplyDataValidationError) ErrorName() string { return "MostNewReplyDataValidationError" }

// Error satisfies the builtin error interface
func (e MostNewReplyDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMostNewReplyData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MostNewReplyDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MostNewReplyDataValidationError{}

// Validate checks the field values on CourseSearchReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CourseSearchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseSearchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CourseSearchReplyMultiError, or nil if none found.
func (m *CourseSearchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseSearchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CourseSearchReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CourseSearchReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CourseSearchReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CourseSearchReplyMultiError(errors)
	}

	return nil
}

// CourseSearchReplyMultiError is an error wrapping multiple validation errors
// returned by CourseSearchReply.ValidateAll() if the designated constraints
// aren't met.
type CourseSearchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseSearchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseSearchReplyMultiError) AllErrors() []error { return m }

// CourseSearchReplyValidationError is the validation error returned by
// CourseSearchReply.Validate if the designated constraints aren't met.
type CourseSearchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseSearchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseSearchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseSearchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseSearchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseSearchReplyValidationError) ErrorName() string {
	return "CourseSearchReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CourseSearchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseSearchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseSearchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseSearchReplyValidationError{}

// Validate checks the field values on CourseInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CourseInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CourseInfoMultiError, or
// nil if none found.
func (m *CourseInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Level

	// no validation rules for Name

	// no validation rules for Detail

	// no validation rules for Cover

	// no validation rules for Price

	// no validation rules for Status

	// no validation rules for CategoryId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CourseInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CourseInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CourseInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CourseInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CourseInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CourseInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CourseInfoMultiError(errors)
	}

	return nil
}

// CourseInfoMultiError is an error wrapping multiple validation errors
// returned by CourseInfo.ValidateAll() if the designated constraints aren't met.
type CourseInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseInfoMultiError) AllErrors() []error { return m }

// CourseInfoValidationError is the validation error returned by
// CourseInfo.Validate if the designated constraints aren't met.
type CourseInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseInfoValidationError) ErrorName() string { return "CourseInfoValidationError" }

// Error satisfies the builtin error interface
func (e CourseInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseInfoValidationError{}

// Validate checks the field values on TagsListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TagsListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TagsListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TagsListRequestMultiError, or nil if none found.
func (m *TagsListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TagsListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	// no validation rules for Course

	if len(errors) > 0 {
		return TagsListRequestMultiError(errors)
	}

	return nil
}

// TagsListRequestMultiError is an error wrapping multiple validation errors
// returned by TagsListRequest.ValidateAll() if the designated constraints
// aren't met.
type TagsListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagsListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagsListRequestMultiError) AllErrors() []error { return m }

// TagsListRequestValidationError is the validation error returned by
// TagsListRequest.Validate if the designated constraints aren't met.
type TagsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagsListRequestValidationError) ErrorName() string { return "TagsListRequestValidationError" }

// Error satisfies the builtin error interface
func (e TagsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTagsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagsListRequestValidationError{}

// Validate checks the field values on TagsListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TagsListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TagsListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TagsListReplyMultiError, or
// nil if none found.
func (m *TagsListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TagsListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TagsListReplyValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TagsListReplyValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TagsListReplyValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TagsListReplyMultiError(errors)
	}

	return nil
}

// TagsListReplyMultiError is an error wrapping multiple validation errors
// returned by TagsListReply.ValidateAll() if the designated constraints
// aren't met.
type TagsListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagsListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagsListReplyMultiError) AllErrors() []error { return m }

// TagsListReplyValidationError is the validation error returned by
// TagsListReply.Validate if the designated constraints aren't met.
type TagsListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagsListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagsListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagsListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagsListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagsListReplyValidationError) ErrorName() string { return "TagsListReplyValidationError" }

// Error satisfies the builtin error interface
func (e TagsListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTagsListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagsListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagsListReplyValidationError{}

// Validate checks the field values on Tag with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Tag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tag with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TagMultiError, or nil if none found.
func (m *Tag) ValidateAll() error {
	return m.validate(true)
}

func (m *Tag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return TagMultiError(errors)
	}

	return nil
}

// TagMultiError is an error wrapping multiple validation errors returned by
// Tag.ValidateAll() if the designated constraints aren't met.
type TagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagMultiError) AllErrors() []error { return m }

// TagValidationError is the validation error returned by Tag.Validate if the
// designated constraints aren't met.
type TagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagValidationError) ErrorName() string { return "TagValidationError" }

// Error satisfies the builtin error interface
func (e TagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagValidationError{}

// Validate checks the field values on SearchCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchCourseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchCourseRequestMultiError, or nil if none found.
func (m *SearchCourseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchCourseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageNum != nil {
		// no validation rules for PageNum
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.FirstCategory != nil {
		// no validation rules for FirstCategory
	}

	if m.SecondCategory != nil {
		// no validation rules for SecondCategory
	}

	if m.Level != nil {
		// no validation rules for Level
	}

	if m.Order != nil {
		// no validation rules for Order
	}

	if len(errors) > 0 {
		return SearchCourseRequestMultiError(errors)
	}

	return nil
}

// SearchCourseRequestMultiError is an error wrapping multiple validation
// errors returned by SearchCourseRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchCourseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchCourseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchCourseRequestMultiError) AllErrors() []error { return m }

// SearchCourseRequestValidationError is the validation error returned by
// SearchCourseRequest.Validate if the designated constraints aren't met.
type SearchCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchCourseRequestValidationError) ErrorName() string {
	return "SearchCourseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchCourseRequestValidationError{}

// Validate checks the field values on UpdateCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCourseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCourseRequestMultiError, or nil if none found.
func (m *UpdateCourseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCourseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Level

	// no validation rules for Name

	// no validation rules for Detail

	// no validation rules for Cover

	// no validation rules for Price

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return UpdateCourseRequestMultiError(errors)
	}

	return nil
}

// UpdateCourseRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCourseRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCourseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCourseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCourseRequestMultiError) AllErrors() []error { return m }

// UpdateCourseRequestValidationError is the validation error returned by
// UpdateCourseRequest.Validate if the designated constraints aren't met.
type UpdateCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCourseRequestValidationError) ErrorName() string {
	return "UpdateCourseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCourseRequestValidationError{}

// Validate checks the field values on UpdateCourseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateCourseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCourseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCourseReplyMultiError, or nil if none found.
func (m *UpdateCourseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCourseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCourseReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCourseReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCourseReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCourseReplyMultiError(errors)
	}

	return nil
}

// UpdateCourseReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateCourseReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateCourseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCourseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCourseReplyMultiError) AllErrors() []error { return m }

// UpdateCourseReplyValidationError is the validation error returned by
// UpdateCourseReply.Validate if the designated constraints aren't met.
type UpdateCourseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCourseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCourseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCourseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCourseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCourseReplyValidationError) ErrorName() string {
	return "UpdateCourseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCourseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCourseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCourseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCourseReplyValidationError{}

// Validate checks the field values on ReviewCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReviewCourseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReviewCourseRequestMultiError, or nil if none found.
func (m *ReviewCourseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewCourseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return ReviewCourseRequestMultiError(errors)
	}

	return nil
}

// ReviewCourseRequestMultiError is an error wrapping multiple validation
// errors returned by ReviewCourseRequest.ValidateAll() if the designated
// constraints aren't met.
type ReviewCourseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewCourseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewCourseRequestMultiError) AllErrors() []error { return m }

// ReviewCourseRequestValidationError is the validation error returned by
// ReviewCourseRequest.Validate if the designated constraints aren't met.
type ReviewCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewCourseRequestValidationError) ErrorName() string {
	return "ReviewCourseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewCourseRequestValidationError{}

// Validate checks the field values on ReviewCourseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReviewCourseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewCourseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReviewCourseReplyMultiError, or nil if none found.
func (m *ReviewCourseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewCourseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReviewCourseReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReviewCourseReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReviewCourseReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReviewCourseReplyMultiError(errors)
	}

	return nil
}

// ReviewCourseReplyMultiError is an error wrapping multiple validation errors
// returned by ReviewCourseReply.ValidateAll() if the designated constraints
// aren't met.
type ReviewCourseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewCourseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewCourseReplyMultiError) AllErrors() []error { return m }

// ReviewCourseReplyValidationError is the validation error returned by
// ReviewCourseReply.Validate if the designated constraints aren't met.
type ReviewCourseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewCourseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewCourseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewCourseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewCourseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewCourseReplyValidationError) ErrorName() string {
	return "ReviewCourseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewCourseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewCourseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewCourseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewCourseReplyValidationError{}

// Validate checks the field values on CreateCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCourseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCourseRequestMultiError, or nil if none found.
func (m *CreateCourseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCourseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Level

	// no validation rules for Name

	// no validation rules for Detail

	// no validation rules for Cover

	// no validation rules for Price

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return CreateCourseRequestMultiError(errors)
	}

	return nil
}

// CreateCourseRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCourseRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCourseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCourseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCourseRequestMultiError) AllErrors() []error { return m }

// CreateCourseRequestValidationError is the validation error returned by
// CreateCourseRequest.Validate if the designated constraints aren't met.
type CreateCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCourseRequestValidationError) ErrorName() string {
	return "CreateCourseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCourseRequestValidationError{}

// Validate checks the field values on CreateCourseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCourseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCourseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCourseReplyMultiError, or nil if none found.
func (m *CreateCourseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCourseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCourseReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCourseReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCourseReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCourseReplyMultiError(errors)
	}

	return nil
}

// CreateCourseReplyMultiError is an error wrapping multiple validation errors
// returned by CreateCourseReply.ValidateAll() if the designated constraints
// aren't met.
type CreateCourseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCourseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCourseReplyMultiError) AllErrors() []error { return m }

// CreateCourseReplyValidationError is the validation error returned by
// CreateCourseReply.Validate if the designated constraints aren't met.
type CreateCourseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCourseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCourseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCourseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCourseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCourseReplyValidationError) ErrorName() string {
	return "CreateCourseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCourseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCourseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCourseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCourseReplyValidationError{}

// Validate checks the field values on ListCoursesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCoursesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCoursesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCoursesRequestMultiError, or nil if none found.
func (m *ListCoursesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCoursesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCoursesRequestMultiError(errors)
	}

	return nil
}

// ListCoursesRequestMultiError is an error wrapping multiple validation errors
// returned by ListCoursesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListCoursesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCoursesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCoursesRequestMultiError) AllErrors() []error { return m }

// ListCoursesRequestValidationError is the validation error returned by
// ListCoursesRequest.Validate if the designated constraints aren't met.
type ListCoursesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCoursesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCoursesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCoursesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCoursesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCoursesRequestValidationError) ErrorName() string {
	return "ListCoursesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCoursesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCoursesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCoursesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCoursesRequestValidationError{}

// Validate checks the field values on ListCoursesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCoursesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCoursesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCoursesReplyMultiError, or nil if none found.
func (m *ListCoursesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCoursesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCoursesReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCoursesReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCoursesReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCoursesReplyMultiError(errors)
	}

	return nil
}

// ListCoursesReplyMultiError is an error wrapping multiple validation errors
// returned by ListCoursesReply.ValidateAll() if the designated constraints
// aren't met.
type ListCoursesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCoursesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCoursesReplyMultiError) AllErrors() []error { return m }

// ListCoursesReplyValidationError is the validation error returned by
// ListCoursesReply.Validate if the designated constraints aren't met.
type ListCoursesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCoursesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCoursesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCoursesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCoursesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCoursesReplyValidationError) ErrorName() string { return "ListCoursesReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListCoursesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCoursesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCoursesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCoursesReplyValidationError{}

// Validate checks the field values on GetCourseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCourseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCourseRequestMultiError, or nil if none found.
func (m *GetCourseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCourseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCourseRequestMultiError(errors)
	}

	return nil
}

// GetCourseRequestMultiError is an error wrapping multiple validation errors
// returned by GetCourseRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCourseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourseRequestMultiError) AllErrors() []error { return m }

// GetCourseRequestValidationError is the validation error returned by
// GetCourseRequest.Validate if the designated constraints aren't met.
type GetCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourseRequestValidationError) ErrorName() string { return "GetCourseRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourseRequestValidationError{}

// Validate checks the field values on GetCourseReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCourseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCourseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCourseReplyMultiError,
// or nil if none found.
func (m *GetCourseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCourseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCourseReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCourseReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCourseReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCourseReplyMultiError(errors)
	}

	return nil
}

// GetCourseReplyMultiError is an error wrapping multiple validation errors
// returned by GetCourseReply.ValidateAll() if the designated constraints
// aren't met.
type GetCourseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourseReplyMultiError) AllErrors() []error { return m }

// GetCourseReplyValidationError is the validation error returned by
// GetCourseReply.Validate if the designated constraints aren't met.
type GetCourseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourseReplyValidationError) ErrorName() string { return "GetCourseReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCourseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourseReplyValidationError{}

// Validate checks the field values on DeleteCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCourseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCourseRequestMultiError, or nil if none found.
func (m *DeleteCourseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCourseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCourseRequestMultiError(errors)
	}

	return nil
}

// DeleteCourseRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCourseRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCourseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCourseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCourseRequestMultiError) AllErrors() []error { return m }

// DeleteCourseRequestValidationError is the validation error returned by
// DeleteCourseRequest.Validate if the designated constraints aren't met.
type DeleteCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCourseRequestValidationError) ErrorName() string {
	return "DeleteCourseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCourseRequestValidationError{}

// Validate checks the field values on DeleteCourseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteCourseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCourseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCourseReplyMultiError, or nil if none found.
func (m *DeleteCourseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCourseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return DeleteCourseReplyMultiError(errors)
	}

	return nil
}

// DeleteCourseReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteCourseReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteCourseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCourseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCourseReplyMultiError) AllErrors() []error { return m }

// DeleteCourseReplyValidationError is the validation error returned by
// DeleteCourseReply.Validate if the designated constraints aren't met.
type DeleteCourseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCourseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCourseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCourseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCourseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCourseReplyValidationError) ErrorName() string {
	return "DeleteCourseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCourseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCourseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCourseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCourseReplyValidationError{}

// Validate checks the field values on SliderInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SliderInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SliderInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SliderInfoMultiError, or
// nil if none found.
func (m *SliderInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SliderInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for ImageLink

	if all {
		switch v := interface{}(m.GetCreateAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SliderInfoValidationError{
					field:  "CreateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SliderInfoValidationError{
					field:  "CreateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SliderInfoValidationError{
				field:  "CreateAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SliderInfoValidationError{
					field:  "UpdateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SliderInfoValidationError{
					field:  "UpdateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SliderInfoValidationError{
				field:  "UpdateAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsValid

	// no validation rules for Priority

	if len(errors) > 0 {
		return SliderInfoMultiError(errors)
	}

	return nil
}

// SliderInfoMultiError is an error wrapping multiple validation errors
// returned by SliderInfo.ValidateAll() if the designated constraints aren't met.
type SliderInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SliderInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SliderInfoMultiError) AllErrors() []error { return m }

// SliderInfoValidationError is the validation error returned by
// SliderInfo.Validate if the designated constraints aren't met.
type SliderInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SliderInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SliderInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SliderInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SliderInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SliderInfoValidationError) ErrorName() string { return "SliderInfoValidationError" }

// Error satisfies the builtin error interface
func (e SliderInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSliderInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SliderInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SliderInfoValidationError{}

// Validate checks the field values on CreateSliderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSliderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSliderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSliderRequestMultiError, or nil if none found.
func (m *CreateSliderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSliderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for ImageLink

	// no validation rules for IsValid

	// no validation rules for Priority

	if len(errors) > 0 {
		return CreateSliderRequestMultiError(errors)
	}

	return nil
}

// CreateSliderRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSliderRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSliderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSliderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSliderRequestMultiError) AllErrors() []error { return m }

// CreateSliderRequestValidationError is the validation error returned by
// CreateSliderRequest.Validate if the designated constraints aren't met.
type CreateSliderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSliderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSliderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSliderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSliderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSliderRequestValidationError) ErrorName() string {
	return "CreateSliderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSliderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSliderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSliderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSliderRequestValidationError{}

// Validate checks the field values on CreateSliderReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSliderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSliderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSliderReplyMultiError, or nil if none found.
func (m *CreateSliderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSliderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSliderReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSliderReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSliderReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSliderReplyMultiError(errors)
	}

	return nil
}

// CreateSliderReplyMultiError is an error wrapping multiple validation errors
// returned by CreateSliderReply.ValidateAll() if the designated constraints
// aren't met.
type CreateSliderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSliderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSliderReplyMultiError) AllErrors() []error { return m }

// CreateSliderReplyValidationError is the validation error returned by
// CreateSliderReply.Validate if the designated constraints aren't met.
type CreateSliderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSliderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSliderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSliderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSliderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSliderReplyValidationError) ErrorName() string {
	return "CreateSliderReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSliderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSliderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSliderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSliderReplyValidationError{}

// Validate checks the field values on GetSliderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSliderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSliderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSliderRequestMultiError, or nil if none found.
func (m *GetSliderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSliderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSliderRequestMultiError(errors)
	}

	return nil
}

// GetSliderRequestMultiError is an error wrapping multiple validation errors
// returned by GetSliderRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSliderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSliderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSliderRequestMultiError) AllErrors() []error { return m }

// GetSliderRequestValidationError is the validation error returned by
// GetSliderRequest.Validate if the designated constraints aren't met.
type GetSliderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSliderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSliderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSliderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSliderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSliderRequestValidationError) ErrorName() string { return "GetSliderRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSliderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSliderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSliderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSliderRequestValidationError{}

// Validate checks the field values on GetSliderReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSliderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSliderReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSliderReplyMultiError,
// or nil if none found.
func (m *GetSliderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSliderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSliderReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSliderReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSliderReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSliderReplyMultiError(errors)
	}

	return nil
}

// GetSliderReplyMultiError is an error wrapping multiple validation errors
// returned by GetSliderReply.ValidateAll() if the designated constraints
// aren't met.
type GetSliderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSliderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSliderReplyMultiError) AllErrors() []error { return m }

// GetSliderReplyValidationError is the validation error returned by
// GetSliderReply.Validate if the designated constraints aren't met.
type GetSliderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSliderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSliderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSliderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSliderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSliderReplyValidationError) ErrorName() string { return "GetSliderReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetSliderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSliderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSliderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSliderReplyValidationError{}

// Validate checks the field values on DeleteSliderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSliderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSliderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSliderRequestMultiError, or nil if none found.
func (m *DeleteSliderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSliderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteSliderRequestMultiError(errors)
	}

	return nil
}

// DeleteSliderRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSliderRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSliderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSliderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSliderRequestMultiError) AllErrors() []error { return m }

// DeleteSliderRequestValidationError is the validation error returned by
// DeleteSliderRequest.Validate if the designated constraints aren't met.
type DeleteSliderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSliderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSliderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSliderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSliderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSliderRequestValidationError) ErrorName() string {
	return "DeleteSliderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSliderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSliderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSliderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSliderRequestValidationError{}

// Validate checks the field values on DeleteSliderReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteSliderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSliderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSliderReplyMultiError, or nil if none found.
func (m *DeleteSliderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSliderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return DeleteSliderReplyMultiError(errors)
	}

	return nil
}

// DeleteSliderReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteSliderReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteSliderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSliderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSliderReplyMultiError) AllErrors() []error { return m }

// DeleteSliderReplyValidationError is the validation error returned by
// DeleteSliderReply.Validate if the designated constraints aren't met.
type DeleteSliderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSliderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSliderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSliderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSliderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSliderReplyValidationError) ErrorName() string {
	return "DeleteSliderReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSliderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSliderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSliderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSliderReplyValidationError{}

// Validate checks the field values on UpdateSliderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSliderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSliderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSliderRequestMultiError, or nil if none found.
func (m *UpdateSliderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSliderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for ImageLink

	// no validation rules for IsValid

	// no validation rules for Priority

	if len(errors) > 0 {
		return UpdateSliderRequestMultiError(errors)
	}

	return nil
}

// UpdateSliderRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSliderRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSliderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSliderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSliderRequestMultiError) AllErrors() []error { return m }

// UpdateSliderRequestValidationError is the validation error returned by
// UpdateSliderRequest.Validate if the designated constraints aren't met.
type UpdateSliderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSliderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSliderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSliderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSliderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSliderRequestValidationError) ErrorName() string {
	return "UpdateSliderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSliderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSliderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSliderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSliderRequestValidationError{}

// Validate checks the field values on UpdateSliderReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateSliderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSliderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSliderReplyMultiError, or nil if none found.
func (m *UpdateSliderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSliderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSliderReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSliderReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSliderReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSliderReplyMultiError(errors)
	}

	return nil
}

// UpdateSliderReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateSliderReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateSliderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSliderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSliderReplyMultiError) AllErrors() []error { return m }

// UpdateSliderReplyValidationError is the validation error returned by
// UpdateSliderReply.Validate if the designated constraints aren't met.
type UpdateSliderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSliderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSliderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSliderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSliderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSliderReplyValidationError) ErrorName() string {
	return "UpdateSliderReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSliderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSliderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSliderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSliderReplyValidationError{}

// Validate checks the field values on ListSlidersByPriorityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSlidersByPriorityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSlidersByPriorityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSlidersByPriorityRequestMultiError, or nil if none found.
func (m *ListSlidersByPriorityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSlidersByPriorityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Priority

	// no validation rules for Count

	if len(errors) > 0 {
		return ListSlidersByPriorityRequestMultiError(errors)
	}

	return nil
}

// ListSlidersByPriorityRequestMultiError is an error wrapping multiple
// validation errors returned by ListSlidersByPriorityRequest.ValidateAll() if
// the designated constraints aren't met.
type ListSlidersByPriorityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSlidersByPriorityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSlidersByPriorityRequestMultiError) AllErrors() []error { return m }

// ListSlidersByPriorityRequestValidationError is the validation error returned
// by ListSlidersByPriorityRequest.Validate if the designated constraints
// aren't met.
type ListSlidersByPriorityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSlidersByPriorityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSlidersByPriorityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSlidersByPriorityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSlidersByPriorityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSlidersByPriorityRequestValidationError) ErrorName() string {
	return "ListSlidersByPriorityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSlidersByPriorityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSlidersByPriorityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSlidersByPriorityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSlidersByPriorityRequestValidationError{}

// Validate checks the field values on ListSlidersByPriorityReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSlidersByPriorityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSlidersByPriorityReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSlidersByPriorityReplyMultiError, or nil if none found.
func (m *ListSlidersByPriorityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSlidersByPriorityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSlidersByPriorityReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSlidersByPriorityReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSlidersByPriorityReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSlidersByPriorityReplyMultiError(errors)
	}

	return nil
}

// ListSlidersByPriorityReplyMultiError is an error wrapping multiple
// validation errors returned by ListSlidersByPriorityReply.ValidateAll() if
// the designated constraints aren't met.
type ListSlidersByPriorityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSlidersByPriorityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSlidersByPriorityReplyMultiError) AllErrors() []error { return m }

// ListSlidersByPriorityReplyValidationError is the validation error returned
// by ListSlidersByPriorityReply.Validate if the designated constraints aren't met.
type ListSlidersByPriorityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSlidersByPriorityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSlidersByPriorityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSlidersByPriorityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSlidersByPriorityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSlidersByPriorityReplyValidationError) ErrorName() string {
	return "ListSlidersByPriorityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSlidersByPriorityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSlidersByPriorityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSlidersByPriorityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSlidersByPriorityReplyValidationError{}

// Validate checks the field values on GetInfoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetInfoRequestMultiError,
// or nil if none found.
func (m *GetInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetInfoRequestMultiError(errors)
	}

	return nil
}

// GetInfoRequestMultiError is an error wrapping multiple validation errors
// returned by GetInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type GetInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInfoRequestMultiError) AllErrors() []error { return m }

// GetInfoRequestValidationError is the validation error returned by
// GetInfoRequest.Validate if the designated constraints aren't met.
type GetInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInfoRequestValidationError) ErrorName() string { return "GetInfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInfoRequestValidationError{}

// Validate checks the field values on UserInfoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoReplyMultiError, or
// nil if none found.
func (m *UserInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for RoleId

	// no validation rules for Channel

	if len(errors) > 0 {
		return UserInfoReplyMultiError(errors)
	}

	return nil
}

// UserInfoReplyMultiError is an error wrapping multiple validation errors
// returned by UserInfoReply.ValidateAll() if the designated constraints
// aren't met.
type UserInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoReplyMultiError) AllErrors() []error { return m }

// UserInfoReplyValidationError is the validation error returned by
// UserInfoReply.Validate if the designated constraints aren't met.
type UserInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoReplyValidationError) ErrorName() string { return "UserInfoReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoReplyValidationError{}

// Validate checks the field values on LoginByJsonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginByJsonRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByJsonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByJsonRequestMultiError, or nil if none found.
func (m *LoginByJsonRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByJsonRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginByJsonRequestMultiError(errors)
	}

	return nil
}

// LoginByJsonRequestMultiError is an error wrapping multiple validation errors
// returned by LoginByJsonRequest.ValidateAll() if the designated constraints
// aren't met.
type LoginByJsonRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByJsonRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByJsonRequestMultiError) AllErrors() []error { return m }

// LoginByJsonRequestValidationError is the validation error returned by
// LoginByJsonRequest.Validate if the designated constraints aren't met.
type LoginByJsonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByJsonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByJsonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByJsonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByJsonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByJsonRequestValidationError) ErrorName() string {
	return "LoginByJsonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginByJsonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByJsonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByJsonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByJsonRequestValidationError{}

// Validate checks the field values on LoginByJsonReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginByJsonReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByJsonReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByJsonReplyMultiError, or nil if none found.
func (m *LoginByJsonReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByJsonReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginByJsonReplyValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginByJsonReplyValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginByJsonReplyValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginByJsonReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginByJsonReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginByJsonReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginByJsonReplyMultiError(errors)
	}

	return nil
}

// LoginByJsonReplyMultiError is an error wrapping multiple validation errors
// returned by LoginByJsonReply.ValidateAll() if the designated constraints
// aren't met.
type LoginByJsonReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByJsonReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByJsonReplyMultiError) AllErrors() []error { return m }

// LoginByJsonReplyValidationError is the validation error returned by
// LoginByJsonReply.Validate if the designated constraints aren't met.
type LoginByJsonReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByJsonReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByJsonReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByJsonReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByJsonReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByJsonReplyValidationError) ErrorName() string { return "LoginByJsonReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginByJsonReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByJsonReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByJsonReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByJsonReplyValidationError{}

// Validate checks the field values on RegisterUsernameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterUsernameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterUsernameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterUsernameRequestMultiError, or nil if none found.
func (m *RegisterUsernameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterUsernameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_RegisterUsernameRequest_Username_Pattern.MatchString(m.GetUsername()) {
		err := RegisterUsernameRequestValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := RegisterUsernameRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterUsernameRequestMultiError(errors)
	}

	return nil
}

// RegisterUsernameRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterUsernameRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterUsernameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterUsernameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterUsernameRequestMultiError) AllErrors() []error { return m }

// RegisterUsernameRequestValidationError is the validation error returned by
// RegisterUsernameRequest.Validate if the designated constraints aren't met.
type RegisterUsernameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUsernameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUsernameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUsernameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUsernameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUsernameRequestValidationError) ErrorName() string {
	return "RegisterUsernameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterUsernameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUsernameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUsernameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUsernameRequestValidationError{}

var _RegisterUsernameRequest_Username_Pattern = regexp.MustCompile("^[a-zA-Z0-9]+$")

// Validate checks the field values on RegisterUsernameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterUsernameReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterUsernameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterUsernameReplyMultiError, or nil if none found.
func (m *RegisterUsernameReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterUsernameReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterUsernameReplyValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterUsernameReplyValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterUsernameReplyValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterUsernameReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterUsernameReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterUsernameReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterUsernameReplyMultiError(errors)
	}

	return nil
}

// RegisterUsernameReplyMultiError is an error wrapping multiple validation
// errors returned by RegisterUsernameReply.ValidateAll() if the designated
// constraints aren't met.
type RegisterUsernameReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterUsernameReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterUsernameReplyMultiError) AllErrors() []error { return m }

// RegisterUsernameReplyValidationError is the validation error returned by
// RegisterUsernameReply.Validate if the designated constraints aren't met.
type RegisterUsernameReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUsernameReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUsernameReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUsernameReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUsernameReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUsernameReplyValidationError) ErrorName() string {
	return "RegisterUsernameReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterUsernameReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUsernameReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUsernameReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUsernameReplyValidationError{}

// Validate checks the field values on LoginByJsonReplyData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginByJsonReplyData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByJsonReplyData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByJsonReplyDataMultiError, or nil if none found.
func (m *LoginByJsonReplyData) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByJsonReplyData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return LoginByJsonReplyDataMultiError(errors)
	}

	return nil
}

// LoginByJsonReplyDataMultiError is an error wrapping multiple validation
// errors returned by LoginByJsonReplyData.ValidateAll() if the designated
// constraints aren't met.
type LoginByJsonReplyDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByJsonReplyDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByJsonReplyDataMultiError) AllErrors() []error { return m }

// LoginByJsonReplyDataValidationError is the validation error returned by
// LoginByJsonReplyData.Validate if the designated constraints aren't met.
type LoginByJsonReplyDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByJsonReplyDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByJsonReplyDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByJsonReplyDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByJsonReplyDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByJsonReplyDataValidationError) ErrorName() string {
	return "LoginByJsonReplyDataValidationError"
}

// Error satisfies the builtin error interface
func (e LoginByJsonReplyDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByJsonReplyData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByJsonReplyDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByJsonReplyDataValidationError{}

// Validate checks the field values on DeleteCategoryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteCategoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCategoryReqMultiError, or nil if none found.
func (m *DeleteCategoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCategoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCategoryReqMultiError(errors)
	}

	return nil
}

// DeleteCategoryReqMultiError is an error wrapping multiple validation errors
// returned by DeleteCategoryReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteCategoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCategoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCategoryReqMultiError) AllErrors() []error { return m }

// DeleteCategoryReqValidationError is the validation error returned by
// DeleteCategoryReq.Validate if the designated constraints aren't met.
type DeleteCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCategoryReqValidationError) ErrorName() string {
	return "DeleteCategoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCategoryReqValidationError{}

// Validate checks the field values on UpdateCategoryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryReqMultiError, or nil if none found.
func (m *UpdateCategoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CategoryName

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateCategoryReqMultiError(errors)
	}

	return nil
}

// UpdateCategoryReqMultiError is an error wrapping multiple validation errors
// returned by UpdateCategoryReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateCategoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryReqMultiError) AllErrors() []error { return m }

// UpdateCategoryReqValidationError is the validation error returned by
// UpdateCategoryReq.Validate if the designated constraints aren't met.
type UpdateCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryReqValidationError) ErrorName() string {
	return "UpdateCategoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryReqValidationError{}

// Validate checks the field values on SystemSettingsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SystemSettingsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemSettingsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SystemSettingsReplyMultiError, or nil if none found.
func (m *SystemSettingsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemSettingsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Logourl

	// no validation rules for Wechaturl

	// no validation rules for Computerurl

	if len(errors) > 0 {
		return SystemSettingsReplyMultiError(errors)
	}

	return nil
}

// SystemSettingsReplyMultiError is an error wrapping multiple validation
// errors returned by SystemSettingsReply.ValidateAll() if the designated
// constraints aren't met.
type SystemSettingsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemSettingsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemSettingsReplyMultiError) AllErrors() []error { return m }

// SystemSettingsReplyValidationError is the validation error returned by
// SystemSettingsReply.Validate if the designated constraints aren't met.
type SystemSettingsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemSettingsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemSettingsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemSettingsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemSettingsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemSettingsReplyValidationError) ErrorName() string {
	return "SystemSettingsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SystemSettingsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemSettingsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemSettingsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemSettingsReplyValidationError{}
